/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.quadkey;

public class QuadKey {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected QuadKey(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(QuadKey obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        SwigQuadKeyJNI.delete_QuadKey(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public QuadKey() {
    this(SwigQuadKeyJNI.new_QuadKey__SWIG_0(), true);
  }

  public QuadKey(Type type) {
    this(SwigQuadKeyJNI.new_QuadKey__SWIG_1(type.swigValue()), true);
  }

  public QuadKey(Type type, long row, long col, short depth) {
    this(SwigQuadKeyJNI.new_QuadKey__SWIG_2(type.swigValue(), row, col, depth), true);
  }

  public QuadKey(QuadKey other) {
    this(SwigQuadKeyJNI.new_QuadKey__SWIG_3(QuadKey.getCPtr(other), other), true);
  }

  public QuadKey assignQuadKey(QuadKey other) {
    return new QuadKey(SwigQuadKeyJNI.QuadKey_assignQuadKey(swigCPtr, this, QuadKey.getCPtr(other), other), false);
  }

  public Type getType() {
    return Type.swigToEnum(SwigQuadKeyJNI.QuadKey_getType(swigCPtr, this));
  }

  public String typeAsString() {
    return SwigQuadKeyJNI.QuadKey_typeAsString(swigCPtr, this);
  }

  public long getRow() {
    return SwigQuadKeyJNI.QuadKey_getRow(swigCPtr, this);
  }

  public long getCol() {
    return SwigQuadKeyJNI.QuadKey_getCol(swigCPtr, this);
  }

  public short getDepth() {
    return SwigQuadKeyJNI.QuadKey_getDepth(swigCPtr, this);
  }

  public boolean isRootKey() {
    return SwigQuadKeyJNI.QuadKey_isRootKey(swigCPtr, this);
  }

  public QuadKey getParent() {
    return new QuadKey(SwigQuadKeyJNI.QuadKey_getParent(swigCPtr, this), true);
  }

  public boolean isMyAncestor(QuadKey quadKey) {
    return SwigQuadKeyJNI.QuadKey_isMyAncestor(swigCPtr, this, QuadKey.getCPtr(quadKey), quadKey);
  }

  public QuadKey getAncestor(short depthDelta) {
    return new QuadKey(SwigQuadKeyJNI.QuadKey_getAncestor(swigCPtr, this, depthDelta), true);
  }

  public QuadKey getChild(QuadKey.Quadrant quadrant) {
    return new QuadKey(SwigQuadKeyJNI.QuadKey_getChild(swigCPtr, this, quadrant.swigValue()), true);
  }

  public QuadKeyVector getChildren() {
    return new QuadKeyVector(SwigQuadKeyJNI.QuadKey_getChildren(swigCPtr, this), true);
  }

  public QuadKeyVector getDescendants(short depthDelta) {
    return new QuadKeyVector(SwigQuadKeyJNI.QuadKey_getDescendants(swigCPtr, this, depthDelta), true);
  }

  public QuadKeyVector getSiblings() {
    return new QuadKeyVector(SwigQuadKeyJNI.QuadKey_getSiblings(swigCPtr, this), true);
  }

  public QuadKeyVector getNeighbors() {
    return new QuadKeyVector(SwigQuadKeyJNI.QuadKey_getNeighbors(swigCPtr, this), true);
  }

  public void getGeoCoordinateBounds2d(GeoCoordinateBoundingBox2d outBounds) {
    SwigQuadKeyJNI.QuadKey_getGeoCoordinateBounds2d(swigCPtr, this, GeoCoordinateBoundingBox2d.getCPtr(outBounds), outBounds);
  }

  public String toInternalString() {
    return SwigQuadKeyJNI.QuadKey_toInternalString(swigCPtr, this);
  }

  public static QuadKey fromInternalString(Type type, String inString) {
    return new QuadKey(SwigQuadKeyJNI.QuadKey_fromInternalString(type.swigValue(), inString), true);
  }

  public static QuadKey getKeyFromLongitudeLatitudeAtDepth(Type type, GeoCoordinate2d coords, short depth) {
    return new QuadKey(SwigQuadKeyJNI.QuadKey_getKeyFromLongitudeLatitudeAtDepth(type.swigValue(), GeoCoordinate2d.getCPtr(coords), coords, depth), true);
  }

  public static QuadKeyVector getKeysFromLongitudeLatitudeBoundingBox(Type type, GeoCoordinateBoundingBox2d bounds, short depth) {
    return new QuadKeyVector(SwigQuadKeyJNI.QuadKey_getKeysFromLongitudeLatitudeBoundingBox(type.swigValue(), GeoCoordinateBoundingBox2d.getCPtr(bounds), bounds, depth), true);
  }

  public static short maxDepth(Type type) {
    return SwigQuadKeyJNI.QuadKey_maxDepth(type.swigValue());
  }

  public static long maxRows(Type type, short depth) {
    return SwigQuadKeyJNI.QuadKey_maxRows(type.swigValue(), depth);
  }

  public static long maxCols(Type type, short depth) {
    return SwigQuadKeyJNI.QuadKey_maxCols(type.swigValue(), depth);
  }

  public static java.math.BigInteger maxTiles(Type type, short depth) {
    return SwigQuadKeyJNI.QuadKey_maxTiles(type.swigValue(), depth);
  }

  public boolean lessThan(QuadKey rhs) {
    return SwigQuadKeyJNI.QuadKey_lessThan(swigCPtr, this, QuadKey.getCPtr(rhs), rhs);
  }

  public boolean equalTo(QuadKey rhs) {
    return SwigQuadKeyJNI.QuadKey_equalTo(swigCPtr, this, QuadKey.getCPtr(rhs), rhs);
  }

  public boolean notEqualTo(QuadKey rhs) {
    return SwigQuadKeyJNI.QuadKey_notEqualTo(swigCPtr, this, QuadKey.getCPtr(rhs), rhs);
  }

  public final static class Quadrant {
    public final static QuadKey.Quadrant SouthWest = new QuadKey.Quadrant("SouthWest", SwigQuadKeyJNI.QuadKey_Quadrant_SouthWest_get());
    public final static QuadKey.Quadrant SouthEast = new QuadKey.Quadrant("SouthEast", SwigQuadKeyJNI.QuadKey_Quadrant_SouthEast_get());
    public final static QuadKey.Quadrant NorthWest = new QuadKey.Quadrant("NorthWest", SwigQuadKeyJNI.QuadKey_Quadrant_NorthWest_get());
    public final static QuadKey.Quadrant NorthEast = new QuadKey.Quadrant("NorthEast", SwigQuadKeyJNI.QuadKey_Quadrant_NorthEast_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Quadrant swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Quadrant.class + " with value " + swigValue);
    }

    private Quadrant(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Quadrant(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Quadrant(String swigName, Quadrant swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Quadrant[] swigValues = { SouthWest, SouthEast, NorthWest, NorthEast };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
