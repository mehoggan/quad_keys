/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.quad_keys;

public class QuadKey {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected QuadKey(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(QuadKey obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(QuadKey obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        quad_key_javaJNI.delete_QuadKey(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public QuadKey() {
    this(quad_key_javaJNI.new_QuadKey__SWIG_0(), true);
  }

  public QuadKey(Type t) {
    this(quad_key_javaJNI.new_QuadKey__SWIG_1(t.swigValue()), true);
  }

  public QuadKey(Type t, long row, long col, short depth) {
    this(quad_key_javaJNI.new_QuadKey__SWIG_2(t.swigValue(), row, col, depth), true);
  }

  public QuadKey(QuadKey other) {
    this(quad_key_javaJNI.new_QuadKey__SWIG_3(QuadKey.getCPtr(other), other), true);
  }

  public QuadKey assignQuadKey(QuadKey other) {
    return new QuadKey(quad_key_javaJNI.QuadKey_assignQuadKey(swigCPtr, this, QuadKey.getCPtr(other), other), false);
  }

  public Type get_type() {
    return Type.swigToEnum(quad_key_javaJNI.QuadKey_get_type(swigCPtr, this));
  }

  public String type_as_string() {
    return quad_key_javaJNI.QuadKey_type_as_string(swigCPtr, this);
  }

  public long get_row() {
    return quad_key_javaJNI.QuadKey_get_row(swigCPtr, this);
  }

  public long get_col() {
    return quad_key_javaJNI.QuadKey_get_col(swigCPtr, this);
  }

  public short get_depth() {
    return quad_key_javaJNI.QuadKey_get_depth(swigCPtr, this);
  }

  public boolean is_root_key() {
    return quad_key_javaJNI.QuadKey_is_root_key(swigCPtr, this);
  }

  public QuadKey get_parent() {
    return new QuadKey(quad_key_javaJNI.QuadKey_get_parent(swigCPtr, this), true);
  }

  public boolean is_my_ancestor(QuadKey quad_key) {
    return quad_key_javaJNI.QuadKey_is_my_ancestor(swigCPtr, this, QuadKey.getCPtr(quad_key), quad_key);
  }

  public QuadKey get_ancestor(short depth_delta) {
    return new QuadKey(quad_key_javaJNI.QuadKey_get_ancestor(swigCPtr, this, depth_delta), true);
  }

  public QuadKey get_child(QuadKey.quadrant quad_id) {
    return new QuadKey(quad_key_javaJNI.QuadKey_get_child(swigCPtr, this, quad_id.swigValue()), true);
  }

  public QuadKeysVector get_children() {
    return new QuadKeysVector(quad_key_javaJNI.QuadKey_get_children(swigCPtr, this), true);
  }

  public QuadKeysVector get_descendants(short depth_delta) {
    return new QuadKeysVector(quad_key_javaJNI.QuadKey_get_descendants(swigCPtr, this, depth_delta), true);
  }

  public QuadKeysVector get_siblings() {
    return new QuadKeysVector(quad_key_javaJNI.QuadKey_get_siblings(swigCPtr, this), true);
  }

  public QuadKeysVector get_neighbors() {
    return new QuadKeysVector(quad_key_javaJNI.QuadKey_get_neighbors(swigCPtr, this), true);
  }

  public void get_geo_coordinate_bounds2d(GeoCoordinateBoundingBox2d out_bounds) {
    quad_key_javaJNI.QuadKey_get_geo_coordinate_bounds2d(swigCPtr, this, GeoCoordinateBoundingBox2d.getCPtr(out_bounds), out_bounds);
  }

  public String to_internal_string() {
    return quad_key_javaJNI.QuadKey_to_internal_string(swigCPtr, this);
  }

  public static QuadKey from_internal_string(Type t, String in_string) {
    return new QuadKey(quad_key_javaJNI.QuadKey_from_internal_string(t.swigValue(), in_string), true);
  }

  public static QuadKey get_key_from_longitude_latitude_at_depth(Type t, GeoCoordinate2d coords, short depth) {
    return new QuadKey(quad_key_javaJNI.QuadKey_get_key_from_longitude_latitude_at_depth(t.swigValue(), GeoCoordinate2d.getCPtr(coords), coords, depth), true);
  }

  public static QuadKeysVector get_keys_from_longitude_latitude_bounding_box(Type t, GeoCoordinateBoundingBox2d bounds, short depth) {
    return new QuadKeysVector(quad_key_javaJNI.QuadKey_get_keys_from_longitude_latitude_bounding_box(t.swigValue(), GeoCoordinateBoundingBox2d.getCPtr(bounds), bounds, depth), true);
  }

  public static short max_depth(Type t) {
    return quad_key_javaJNI.QuadKey_max_depth(t.swigValue());
  }

  public static long max_rows(Type t, short depth) {
    return quad_key_javaJNI.QuadKey_max_rows(t.swigValue(), depth);
  }

  public static long max_cols(Type t, short depth) {
    return quad_key_javaJNI.QuadKey_max_cols(t.swigValue(), depth);
  }

  public static java.math.BigInteger max_tiles(Type t, short depth) {
    return quad_key_javaJNI.QuadKey_max_tiles(t.swigValue(), depth);
  }

  public boolean lessThan(QuadKey rhs) {
    return quad_key_javaJNI.QuadKey_lessThan(swigCPtr, this, QuadKey.getCPtr(rhs), rhs);
  }

  public boolean equalTo(QuadKey rhs) {
    return quad_key_javaJNI.QuadKey_equalTo(swigCPtr, this, QuadKey.getCPtr(rhs), rhs);
  }

  public boolean notEqualTo(QuadKey rhs) {
    return quad_key_javaJNI.QuadKey_notEqualTo(swigCPtr, this, QuadKey.getCPtr(rhs), rhs);
  }

  public final static class quadrant {
    public final static QuadKey.quadrant south_west = new QuadKey.quadrant("south_west", quad_key_javaJNI.QuadKey_quadrant_south_west_get());
    public final static QuadKey.quadrant south_east = new QuadKey.quadrant("south_east", quad_key_javaJNI.QuadKey_quadrant_south_east_get());
    public final static QuadKey.quadrant north_west = new QuadKey.quadrant("north_west", quad_key_javaJNI.QuadKey_quadrant_north_west_get());
    public final static QuadKey.quadrant north_east = new QuadKey.quadrant("north_east", quad_key_javaJNI.QuadKey_quadrant_north_east_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static quadrant swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + quadrant.class + " with value " + swigValue);
    }

    private quadrant(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private quadrant(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private quadrant(String swigName, quadrant swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static quadrant[] swigValues = { south_west, south_east, north_west, north_east };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
