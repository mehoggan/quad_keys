/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.quad_keys;

public class quad_keys_javaJNI {
  public final static native double Longitude_min_longitude_get();
  public final static native double Longitude_max_longitude_get();
  public final static native long new_Longitude__SWIG_0(double jarg1);
  public final static native long new_Longitude__SWIG_1(long jarg1, Longitude jarg1_);
  public final static native long Longitude_assignLongitude(long jarg1, Longitude jarg1_, long jarg2, Longitude jarg2_);
  public final static native double Longitude_val(long jarg1, Longitude jarg1_);
  public final static native boolean Longitude_near__SWIG_0(long jarg1, Longitude jarg1_, long jarg2, Longitude jarg2_, double jarg3);
  public final static native boolean Longitude_near__SWIG_1(long jarg1, Longitude jarg1_, long jarg2, Longitude jarg2_);
  public final static native boolean Longitude_lessThan(long jarg1, Longitude jarg1_, long jarg2, Longitude jarg2_);
  public final static native boolean Longitude_lessThanOrEqual(long jarg1, Longitude jarg1_, long jarg2, Longitude jarg2_);
  public final static native boolean Longitude_greaterThan(long jarg1, Longitude jarg1_, long jarg2, Longitude jarg2_);
  public final static native boolean Longitude_greaterThanOrEqual(long jarg1, Longitude jarg1_, long jarg2, Longitude jarg2_);
  public final static native boolean Longitude_equalTo(long jarg1, Longitude jarg1_, long jarg2, Longitude jarg2_);
  public final static native boolean Longitude_notEqualTo(long jarg1, Longitude jarg1_, long jarg2, Longitude jarg2_);
  public final static native double Longitude_longitudeDifference(long jarg1, Longitude jarg1_, long jarg2, Longitude jarg2_);
  public final static native void delete_Longitude(long jarg1);
  public final static native double Latitude_min_latitude_get();
  public final static native double Latitude_max_latitude_get();
  public final static native long new_Latitude__SWIG_0(double jarg1);
  public final static native long new_Latitude__SWIG_1(long jarg1, Latitude jarg1_);
  public final static native long Latitude_assignLatitude(long jarg1, Latitude jarg1_, long jarg2, Latitude jarg2_);
  public final static native double Latitude_val(long jarg1, Latitude jarg1_);
  public final static native boolean Latitude_near__SWIG_0(long jarg1, Latitude jarg1_, long jarg2, Latitude jarg2_, double jarg3);
  public final static native boolean Latitude_near__SWIG_1(long jarg1, Latitude jarg1_, long jarg2, Latitude jarg2_);
  public final static native boolean Latitude_lessThan(long jarg1, Latitude jarg1_, long jarg2, Latitude jarg2_);
  public final static native boolean Latitude_lessThanOrEqual(long jarg1, Latitude jarg1_, long jarg2, Latitude jarg2_);
  public final static native boolean Latitude_greaterThan(long jarg1, Latitude jarg1_, long jarg2, Latitude jarg2_);
  public final static native boolean Latitude_greaterThanOrEqual(long jarg1, Latitude jarg1_, long jarg2, Latitude jarg2_);
  public final static native boolean Latitude_equalTo(long jarg1, Latitude jarg1_, long jarg2, Latitude jarg2_);
  public final static native boolean Latitude_notEqualTo(long jarg1, Latitude jarg1_, long jarg2, Latitude jarg2_);
  public final static native double Latitude_latitudeDifference(long jarg1, Latitude jarg1_, long jarg2, Latitude jarg2_);
  public final static native void delete_Latitude(long jarg1);
  public final static native long new_GeoCoordinate2d__SWIG_0();
  public final static native long new_GeoCoordinate2d__SWIG_1(long jarg1, Longitude jarg1_, long jarg2, Latitude jarg2_);
  public final static native long new_GeoCoordinate2d__SWIG_2(long jarg1, GeoCoordinate2d jarg1_);
  public final static native long GeoCoordinate2d_assignGeoCoordinate2d(long jarg1, GeoCoordinate2d jarg1_, long jarg2, GeoCoordinate2d jarg2_);
  public final static native void GeoCoordinate2d_set_longitude__SWIG_0(long jarg1, GeoCoordinate2d jarg1_, double jarg2);
  public final static native void GeoCoordinate2d_set_latitude__SWIG_0(long jarg1, GeoCoordinate2d jarg1_, double jarg2);
  public final static native void GeoCoordinate2d_set_longitude__SWIG_1(long jarg1, GeoCoordinate2d jarg1_, long jarg2, Longitude jarg2_);
  public final static native void GeoCoordinate2d_set_latitude__SWIG_1(long jarg1, GeoCoordinate2d jarg1_, long jarg2, Latitude jarg2_);
  public final static native long GeoCoordinate2d_get_longitude(long jarg1, GeoCoordinate2d jarg1_);
  public final static native long GeoCoordinate2d_get_latitude(long jarg1, GeoCoordinate2d jarg1_);
  public final static native boolean GeoCoordinate2d_near__SWIG_0(long jarg1, GeoCoordinate2d jarg1_, long jarg2, GeoCoordinate2d jarg2_, double jarg3);
  public final static native boolean GeoCoordinate2d_near__SWIG_1(long jarg1, GeoCoordinate2d jarg1_, long jarg2, GeoCoordinate2d jarg2_);
  public final static native boolean GeoCoordinate2d_equalTo(long jarg1, GeoCoordinate2d jarg1_, long jarg2, GeoCoordinate2d jarg2_);
  public final static native boolean GeoCoordinate2d_notEqualTo(long jarg1, GeoCoordinate2d jarg1_, long jarg2, GeoCoordinate2d jarg2_);
  public final static native void delete_GeoCoordinate2d(long jarg1);
  public final static native long new_GeoCoordinateBoundingBox2d__SWIG_0();
  public final static native long new_GeoCoordinateBoundingBox2d__SWIG_1(long jarg1, GeoCoordinate2d jarg1_, long jarg2, GeoCoordinate2d jarg2_);
  public final static native boolean GeoCoordinateBoundingBox2d_contains(long jarg1, GeoCoordinateBoundingBox2d jarg1_, long jarg2, GeoCoordinate2d jarg2_);
  public final static native void GeoCoordinateBoundingBox2d_grow_to_contain(long jarg1, GeoCoordinateBoundingBox2d jarg1_, long jarg2, GeoCoordinate2d jarg2_);
  public final static native long GeoCoordinateBoundingBox2d_lower_left(long jarg1, GeoCoordinateBoundingBox2d jarg1_);
  public final static native long GeoCoordinateBoundingBox2d_upper_right(long jarg1, GeoCoordinateBoundingBox2d jarg1_);
  public final static native long GeoCoordinateBoundingBox2d_upper_left(long jarg1, GeoCoordinateBoundingBox2d jarg1_);
  public final static native long GeoCoordinateBoundingBox2d_lower_right(long jarg1, GeoCoordinateBoundingBox2d jarg1_);
  public final static native boolean GeoCoordinateBoundingBox2d_is_valid(long jarg1, GeoCoordinateBoundingBox2d jarg1_);
  public final static native void delete_GeoCoordinateBoundingBox2d(long jarg1);
  public final static native String type_to_string(int jarg1);
  public final static native int QuadKey_quadrant_south_west_get();
  public final static native int QuadKey_quadrant_south_east_get();
  public final static native int QuadKey_quadrant_north_west_get();
  public final static native int QuadKey_quadrant_north_east_get();
  public final static native long new_QuadKey__SWIG_0();
  public final static native long new_QuadKey__SWIG_1(int jarg1);
  public final static native long new_QuadKey__SWIG_2(int jarg1, long jarg2, long jarg3, short jarg4);
  public final static native long new_QuadKey__SWIG_3(long jarg1, QuadKey jarg1_);
  public final static native long QuadKey_assignQuadKey(long jarg1, QuadKey jarg1_, long jarg2, QuadKey jarg2_);
  public final static native int QuadKey_get_type(long jarg1, QuadKey jarg1_);
  public final static native String QuadKey_type_as_string(long jarg1, QuadKey jarg1_);
  public final static native long QuadKey_get_row(long jarg1, QuadKey jarg1_);
  public final static native long QuadKey_get_col(long jarg1, QuadKey jarg1_);
  public final static native short QuadKey_get_depth(long jarg1, QuadKey jarg1_);
  public final static native boolean QuadKey_is_root_key(long jarg1, QuadKey jarg1_);
  public final static native long QuadKey_get_parent(long jarg1, QuadKey jarg1_);
  public final static native boolean QuadKey_is_my_ancestor(long jarg1, QuadKey jarg1_, long jarg2, QuadKey jarg2_);
  public final static native long QuadKey_get_ancestor(long jarg1, QuadKey jarg1_, short jarg2);
  public final static native long QuadKey_get_child(long jarg1, QuadKey jarg1_, int jarg2);
  public final static native long QuadKey_get_children(long jarg1, QuadKey jarg1_);
  public final static native long QuadKey_get_descendants(long jarg1, QuadKey jarg1_, short jarg2);
  public final static native long QuadKey_get_siblings(long jarg1, QuadKey jarg1_);
  public final static native long QuadKey_get_neighbors(long jarg1, QuadKey jarg1_);
  public final static native void QuadKey_get_geo_coordinate_bounds2d(long jarg1, QuadKey jarg1_, long jarg2, GeoCoordinateBoundingBox2d jarg2_);
  public final static native String QuadKey_to_internal_string(long jarg1, QuadKey jarg1_);
  public final static native long QuadKey_from_internal_string(int jarg1, String jarg2);
  public final static native long QuadKey_get_key_from_longitude_latitude_at_depth(int jarg1, long jarg2, GeoCoordinate2d jarg2_, short jarg3);
  public final static native long QuadKey_get_keys_from_longitude_latitude_bounding_box(int jarg1, long jarg2, GeoCoordinateBoundingBox2d jarg2_, short jarg3);
  public final static native short QuadKey_max_depth(int jarg1);
  public final static native long QuadKey_max_rows(int jarg1, short jarg2);
  public final static native long QuadKey_max_cols(int jarg1, short jarg2);
  public final static native java.math.BigInteger QuadKey_max_tiles(int jarg1, short jarg2);
  public final static native boolean QuadKey_lessThan(long jarg1, QuadKey jarg1_, long jarg2, QuadKey jarg2_);
  public final static native boolean QuadKey_equalTo(long jarg1, QuadKey jarg1_, long jarg2, QuadKey jarg2_);
  public final static native boolean QuadKey_notEqualTo(long jarg1, QuadKey jarg1_, long jarg2, QuadKey jarg2_);
  public final static native void delete_QuadKey(long jarg1);
  public final static native long new_QuadKeysVector__SWIG_0();
  public final static native long new_QuadKeysVector__SWIG_1(long jarg1, QuadKeysVector jarg1_);
  public final static native boolean QuadKeysVector_isEmpty(long jarg1, QuadKeysVector jarg1_);
  public final static native void QuadKeysVector_clear(long jarg1, QuadKeysVector jarg1_);
  public final static native long new_QuadKeysVector__SWIG_2(int jarg1, long jarg2, QuadKey jarg2_);
  public final static native int QuadKeysVector_doCapacity(long jarg1, QuadKeysVector jarg1_);
  public final static native void QuadKeysVector_doReserve(long jarg1, QuadKeysVector jarg1_, int jarg2);
  public final static native int QuadKeysVector_doSize(long jarg1, QuadKeysVector jarg1_);
  public final static native void QuadKeysVector_doAdd__SWIG_0(long jarg1, QuadKeysVector jarg1_, long jarg2, QuadKey jarg2_);
  public final static native void QuadKeysVector_doAdd__SWIG_1(long jarg1, QuadKeysVector jarg1_, int jarg2, long jarg3, QuadKey jarg3_);
  public final static native long QuadKeysVector_doRemove(long jarg1, QuadKeysVector jarg1_, int jarg2);
  public final static native long QuadKeysVector_doGet(long jarg1, QuadKeysVector jarg1_, int jarg2);
  public final static native long QuadKeysVector_doSet(long jarg1, QuadKeysVector jarg1_, int jarg2, long jarg3, QuadKey jarg3_);
  public final static native void QuadKeysVector_doRemoveRange(long jarg1, QuadKeysVector jarg1_, int jarg2, int jarg3);
  public final static native void delete_QuadKeysVector(long jarg1);
}
