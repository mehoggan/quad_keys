import org.apache.tools.ant.taskdefs.condition.Os

// Note there are warnings and use of deprecated features to maintain compatibility with the ubuntu_22_04.docker
// build within the <root> directory of this repository.

apply plugin: 'java'

repositories {
  mavenCentral()
}

def native_base_dir = "${projectDir}${File.separator}..${File.separator}..${File.separator}..${File.separator}"
def native_lib_dir = "${native_base_dir}build${File.separator}lib${File.separator}.libs/"
project.logger.info("native_lib_dir = ${native_lib_dir}")
def native_bindings_dir = "${native_base_dir}build${File.separator}bindings${File.separator}.libs/"
project.logger.info("native_bindings_dir = ${native_bindings_dir}")

project.logger.info("project.buildDir = ${project.buildDir}")

def library_path = "${project.buildDir}${File.separator}libs"
project.logger.info("library_path = ${library_path}")

def shared_lib_ext_wildcard = ""
if (Os.isFamily(Os.FAMILY_MAC)) {
  project.logger.info("Os is OsX")
  shared_lib_ext_wildcard = "**/*.dylib*"
} else if (Os.isFamily(Os.FAMILY_UNIX)) {
  project.logger.info("Os is Unix")
  shared_lib_ext_wildcard = "**/*.so*"
}

task copyLibs(type: Copy) {
  description = "Copies output of cmake build into same directory as " +
          " the jni built library."
  from layout.buildDirectory.dir("${native_lib_dir}")
  into layout.buildDirectory.dir("${project.buildDir}${File.separator}libs")
  if (Os.isFamily(Os.FAMILY_MAC)) {
    println "Os is OsX"
    include("**/*.dylib*")
  } else if (Os.isFamily(Os.FAMILY_UNIX)) {
    println "Os is Unix"
    include("**/*.so*")
  }
}

task copyBindings(type: Copy) {
  description = "Copies output of cmake build into same directory as " +
          " the jni built library."
  from layout.buildDirectory.dir("${native_bindings_dir}")
  into layout.buildDirectory.dir("${project.buildDir}${File.separator}libs")
  if (Os.isFamily(Os.FAMILY_MAC)) {
    println "Os is OsX"
    include("**/*.dylib*")
  } else if (Os.isFamily(Os.FAMILY_UNIX)) {
    println "Os is Unix"
    include("**/*.so*")
  }
}

compileJava.dependsOn copyLibs
compileJava.dependsOn copyBindings

test {
  testLogging {
    showStandardStreams = true
  }
}

tasks.withType(Test) {
  systemProperty "java.library.path", "${project.buildDir}${File.separator}libs"
  environment("DYLD_LIBRARY_PATH", "${library_path}")
}

dependencies {
  testImplementation "junit:junit:4.12"
}
