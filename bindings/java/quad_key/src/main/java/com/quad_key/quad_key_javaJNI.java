/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.quad_key;

public class quad_key_javaJNI {
  public final static native double longitude_min_longitude_get();
  public final static native double longitude_max_longitude_get();
  public final static native long new_longitude__SWIG_0(double jarg1);
  public final static native long new_longitude__SWIG_1(long jarg1, longitude jarg1_);
  public final static native long longitude_assign_longitude(long jarg1, longitude jarg1_, long jarg2, longitude jarg2_);
  public final static native double longitude_val(long jarg1, longitude jarg1_);
  public final static native boolean longitude_near__SWIG_0(long jarg1, longitude jarg1_, long jarg2, longitude jarg2_, double jarg3);
  public final static native boolean longitude_near__SWIG_1(long jarg1, longitude jarg1_, long jarg2, longitude jarg2_);
  public final static native boolean longitude_less_than(long jarg1, longitude jarg1_, long jarg2, longitude jarg2_);
  public final static native boolean longitude_less_than_or_equal(long jarg1, longitude jarg1_, long jarg2, longitude jarg2_);
  public final static native boolean longitude_greater_than(long jarg1, longitude jarg1_, long jarg2, longitude jarg2_);
  public final static native boolean longitude_greater_than_or_equal(long jarg1, longitude jarg1_, long jarg2, longitude jarg2_);
  public final static native boolean longitude_equal_to(long jarg1, longitude jarg1_, long jarg2, longitude jarg2_);
  public final static native boolean longitude_not_equal_to(long jarg1, longitude jarg1_, long jarg2, longitude jarg2_);
  public final static native double longitude_longitude_difference(long jarg1, longitude jarg1_, long jarg2, longitude jarg2_);
  public final static native void delete_longitude(long jarg1);
  public final static native double latitude_min_latitude_get();
  public final static native double latitude_max_latitude_get();
  public final static native long new_latitude__SWIG_0(double jarg1);
  public final static native long new_latitude__SWIG_1(long jarg1, latitude jarg1_);
  public final static native long latitude_assign_latitude(long jarg1, latitude jarg1_, long jarg2, latitude jarg2_);
  public final static native double latitude_val(long jarg1, latitude jarg1_);
  public final static native boolean latitude_near__SWIG_0(long jarg1, latitude jarg1_, long jarg2, latitude jarg2_, double jarg3);
  public final static native boolean latitude_near__SWIG_1(long jarg1, latitude jarg1_, long jarg2, latitude jarg2_);
  public final static native boolean latitude_less_than(long jarg1, latitude jarg1_, long jarg2, latitude jarg2_);
  public final static native boolean latitude_less_than_or_equal(long jarg1, latitude jarg1_, long jarg2, latitude jarg2_);
  public final static native boolean latitude_greater_than(long jarg1, latitude jarg1_, long jarg2, latitude jarg2_);
  public final static native boolean latitude_greater_than_or_equal(long jarg1, latitude jarg1_, long jarg2, latitude jarg2_);
  public final static native boolean latitude_equal_to(long jarg1, latitude jarg1_, long jarg2, latitude jarg2_);
  public final static native boolean latitude_not_equal_to(long jarg1, latitude jarg1_, long jarg2, latitude jarg2_);
  public final static native double latitude_latitude_difference(long jarg1, latitude jarg1_, long jarg2, latitude jarg2_);
  public final static native void delete_latitude(long jarg1);
  public final static native long new_geo_coordinate2d__SWIG_0();
  public final static native long new_geo_coordinate2d__SWIG_1(long jarg1, longitude jarg1_, long jarg2, latitude jarg2_);
  public final static native long new_geo_coordinate2d__SWIG_2(long jarg1, geo_coordinate2d jarg1_);
  public final static native long geo_coordinate2d_assign_geo_coordinate2d(long jarg1, geo_coordinate2d jarg1_, long jarg2, geo_coordinate2d jarg2_);
  public final static native void geo_coordinate2d_set_longitude__SWIG_0(long jarg1, geo_coordinate2d jarg1_, double jarg2);
  public final static native void geo_coordinate2d_set_latitude__SWIG_0(long jarg1, geo_coordinate2d jarg1_, double jarg2);
  public final static native void geo_coordinate2d_set_longitude__SWIG_1(long jarg1, geo_coordinate2d jarg1_, long jarg2, longitude jarg2_);
  public final static native void geo_coordinate2d_set_latitude__SWIG_1(long jarg1, geo_coordinate2d jarg1_, long jarg2, latitude jarg2_);
  public final static native long geo_coordinate2d_get_longitude(long jarg1, geo_coordinate2d jarg1_);
  public final static native long geo_coordinate2d_get_latitude(long jarg1, geo_coordinate2d jarg1_);
  public final static native boolean geo_coordinate2d_near__SWIG_0(long jarg1, geo_coordinate2d jarg1_, long jarg2, geo_coordinate2d jarg2_, double jarg3);
  public final static native boolean geo_coordinate2d_near__SWIG_1(long jarg1, geo_coordinate2d jarg1_, long jarg2, geo_coordinate2d jarg2_);
  public final static native boolean geo_coordinate2d_equalTo(long jarg1, geo_coordinate2d jarg1_, long jarg2, geo_coordinate2d jarg2_);
  public final static native boolean geo_coordinate2d_notEqualTo(long jarg1, geo_coordinate2d jarg1_, long jarg2, geo_coordinate2d jarg2_);
  public final static native void delete_geo_coordinate2d(long jarg1);
  public final static native long new_geo_coordinate_bounding_box2d__SWIG_0();
  public final static native long new_geo_coordinate_bounding_box2d__SWIG_1(long jarg1, geo_coordinate2d jarg1_, long jarg2, geo_coordinate2d jarg2_);
  public final static native boolean geo_coordinate_bounding_box2d_contains(long jarg1, geo_coordinate_bounding_box2d jarg1_, long jarg2, geo_coordinate2d jarg2_);
  public final static native void geo_coordinate_bounding_box2d_grow_to_contain(long jarg1, geo_coordinate_bounding_box2d jarg1_, long jarg2, geo_coordinate2d jarg2_);
  public final static native long geo_coordinate_bounding_box2d_lower_left(long jarg1, geo_coordinate_bounding_box2d jarg1_);
  public final static native long geo_coordinate_bounding_box2d_upper_right(long jarg1, geo_coordinate_bounding_box2d jarg1_);
  public final static native long geo_coordinate_bounding_box2d_upper_left(long jarg1, geo_coordinate_bounding_box2d jarg1_);
  public final static native long geo_coordinate_bounding_box2d_lower_right(long jarg1, geo_coordinate_bounding_box2d jarg1_);
  public final static native boolean geo_coordinate_bounding_box2d_is_valid(long jarg1, geo_coordinate_bounding_box2d jarg1_);
  public final static native void delete_geo_coordinate_bounding_box2d(long jarg1);
  public final static native String type_to_string(int jarg1);
  public final static native int quad_key_quadrant_south_west_get();
  public final static native int quad_key_quadrant_south_east_get();
  public final static native int quad_key_quadrant_north_west_get();
  public final static native int quad_key_quadrant_north_east_get();
  public final static native long new_quad_key__SWIG_0();
  public final static native long new_quad_key__SWIG_1(int jarg1);
  public final static native long new_quad_key__SWIG_2(int jarg1, long jarg2, long jarg3, short jarg4);
  public final static native long new_quad_key__SWIG_3(long jarg1, quad_key jarg1_);
  public final static native long quad_key_assignquad_key(long jarg1, quad_key jarg1_, long jarg2, quad_key jarg2_);
  public final static native int quad_key_get_type(long jarg1, quad_key jarg1_);
  public final static native String quad_key_type_as_string(long jarg1, quad_key jarg1_);
  public final static native long quad_key_get_row(long jarg1, quad_key jarg1_);
  public final static native long quad_key_get_col(long jarg1, quad_key jarg1_);
  public final static native short quad_key_get_depth(long jarg1, quad_key jarg1_);
  public final static native boolean quad_key_is_root_key(long jarg1, quad_key jarg1_);
  public final static native long quad_key_get_parent(long jarg1, quad_key jarg1_);
  public final static native boolean quad_key_is_my_ancestor(long jarg1, quad_key jarg1_, long jarg2, quad_key jarg2_);
  public final static native long quad_key_get_ancestor(long jarg1, quad_key jarg1_, short jarg2);
  public final static native long quad_key_get_child(long jarg1, quad_key jarg1_, int jarg2);
  public final static native long quad_key_get_children(long jarg1, quad_key jarg1_);
  public final static native long quad_key_get_descendants(long jarg1, quad_key jarg1_, short jarg2);
  public final static native long quad_key_get_siblings(long jarg1, quad_key jarg1_);
  public final static native long quad_key_get_neighbors(long jarg1, quad_key jarg1_);
  public final static native void quad_key_get_geo_coordinate_bounds2d(long jarg1, quad_key jarg1_, long jarg2, geo_coordinate_bounding_box2d jarg2_);
  public final static native String quad_key_to_internal_string(long jarg1, quad_key jarg1_);
  public final static native long quad_key_from_internal_string(int jarg1, String jarg2);
  public final static native long quad_key_get_key_from_longitude_latitude_at_depth(int jarg1, long jarg2, geo_coordinate2d jarg2_, short jarg3);
  public final static native long quad_key_get_keys_from_longitude_latitude_bounding_box(int jarg1, long jarg2, geo_coordinate_bounding_box2d jarg2_, short jarg3);
  public final static native short quad_key_max_depth(int jarg1);
  public final static native long quad_key_max_rows(int jarg1, short jarg2);
  public final static native long quad_key_max_cols(int jarg1, short jarg2);
  public final static native java.math.BigInteger quad_key_max_tiles(int jarg1, short jarg2);
  public final static native boolean quad_key_less_than(long jarg1, quad_key jarg1_, long jarg2, quad_key jarg2_);
  public final static native boolean quad_key_equal_to(long jarg1, quad_key jarg1_, long jarg2, quad_key jarg2_);
  public final static native boolean quad_key_not_equal_to(long jarg1, quad_key jarg1_, long jarg2, quad_key jarg2_);
  public final static native void delete_quad_key(long jarg1);
  public final static native long new_quad_key_vector__SWIG_0();
  public final static native long new_quad_key_vector__SWIG_1(long jarg1);
  public final static native long quad_key_vector_size(long jarg1, quad_key_vector jarg1_);
  public final static native long quad_key_vector_capacity(long jarg1, quad_key_vector jarg1_);
  public final static native void quad_key_vector_reserve(long jarg1, quad_key_vector jarg1_, long jarg2);
  public final static native boolean quad_key_vector_isEmpty(long jarg1, quad_key_vector jarg1_);
  public final static native void quad_key_vector_clear(long jarg1, quad_key_vector jarg1_);
  public final static native void quad_key_vector_add(long jarg1, quad_key_vector jarg1_, long jarg2, quad_key jarg2_);
  public final static native long quad_key_vector_get(long jarg1, quad_key_vector jarg1_, int jarg2);
  public final static native void quad_key_vector_set(long jarg1, quad_key_vector jarg1_, int jarg2, long jarg3, quad_key jarg3_);
  public final static native void delete_quad_key_vector(long jarg1);
}
