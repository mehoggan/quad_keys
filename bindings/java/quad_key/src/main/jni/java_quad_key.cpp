/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "quad_key/quad_key.h"


#include <stdint.h>		// Use the C99 official header


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< quad_keys::quad_key >::const_reference std_vector_Sl_quad_keys_quad_key_Sg__get(std::vector< quad_keys::quad_key > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_quad_keys_quad_key_Sg__set(std::vector< quad_keys::quad_key > *self,int i,std::vector< quad_keys::quad_key >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jdouble JNICALL Java_com_quad_1key_quad_1key_1javaJNI_longitude_1min_1longitude_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)quad_keys::longitude::min_longitude;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_quad_1key_quad_1key_1javaJNI_longitude_1max_1longitude_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)quad_keys::longitude::max_longitude;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_new_1longitude_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  quad_keys::longitude *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (quad_keys::longitude *)new quad_keys::longitude(arg1);
  *(quad_keys::longitude **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_new_1longitude_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  quad_keys::longitude *arg1 = 0 ;
  quad_keys::longitude *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::longitude **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::longitude const & reference is null");
    return 0;
  } 
  result = (quad_keys::longitude *)new quad_keys::longitude((quad_keys::longitude const &)*arg1);
  *(quad_keys::longitude **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_longitude_1assign_1longitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  quad_keys::longitude *arg1 = (quad_keys::longitude *) 0 ;
  quad_keys::longitude *arg2 = 0 ;
  quad_keys::longitude *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::longitude **)&jarg1; 
  arg2 = *(quad_keys::longitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::longitude const & reference is null");
    return 0;
  } 
  result = (quad_keys::longitude *) &(arg1)->operator =((quad_keys::longitude const &)*arg2);
  *(quad_keys::longitude **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_quad_1key_quad_1key_1javaJNI_longitude_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  quad_keys::longitude *arg1 = (quad_keys::longitude *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::longitude **)&jarg1; 
  result = (double)((quad_keys::longitude const *)arg1)->val();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_longitude_1near_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ;
  quad_keys::longitude *arg1 = (quad_keys::longitude *) 0 ;
  quad_keys::longitude *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::longitude **)&jarg1; 
  arg2 = *(quad_keys::longitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::longitude const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)((quad_keys::longitude const *)arg1)->near((quad_keys::longitude const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_longitude_1near_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  quad_keys::longitude *arg1 = (quad_keys::longitude *) 0 ;
  quad_keys::longitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::longitude **)&jarg1; 
  arg2 = *(quad_keys::longitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::longitude const & reference is null");
    return 0;
  } 
  result = (bool)((quad_keys::longitude const *)arg1)->near((quad_keys::longitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_longitude_1less_1than(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  quad_keys::longitude *arg1 = (quad_keys::longitude *) 0 ;
  quad_keys::longitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::longitude **)&jarg1; 
  arg2 = *(quad_keys::longitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::longitude const & reference is null");
    return 0;
  } 
  result = (bool)((quad_keys::longitude const *)arg1)->operator <((quad_keys::longitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_longitude_1less_1than_1or_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  quad_keys::longitude *arg1 = (quad_keys::longitude *) 0 ;
  quad_keys::longitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::longitude **)&jarg1; 
  arg2 = *(quad_keys::longitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::longitude const & reference is null");
    return 0;
  } 
  result = (bool)((quad_keys::longitude const *)arg1)->operator <=((quad_keys::longitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_longitude_1greater_1than(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  quad_keys::longitude *arg1 = (quad_keys::longitude *) 0 ;
  quad_keys::longitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::longitude **)&jarg1; 
  arg2 = *(quad_keys::longitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::longitude const & reference is null");
    return 0;
  } 
  result = (bool)((quad_keys::longitude const *)arg1)->operator >((quad_keys::longitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_longitude_1greater_1than_1or_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  quad_keys::longitude *arg1 = (quad_keys::longitude *) 0 ;
  quad_keys::longitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::longitude **)&jarg1; 
  arg2 = *(quad_keys::longitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::longitude const & reference is null");
    return 0;
  } 
  result = (bool)((quad_keys::longitude const *)arg1)->operator >=((quad_keys::longitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_longitude_1equal_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  quad_keys::longitude *arg1 = (quad_keys::longitude *) 0 ;
  quad_keys::longitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::longitude **)&jarg1; 
  arg2 = *(quad_keys::longitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::longitude const & reference is null");
    return 0;
  } 
  result = (bool)((quad_keys::longitude const *)arg1)->operator ==((quad_keys::longitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_longitude_1not_1equal_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  quad_keys::longitude *arg1 = (quad_keys::longitude *) 0 ;
  quad_keys::longitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::longitude **)&jarg1; 
  arg2 = *(quad_keys::longitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::longitude const & reference is null");
    return 0;
  } 
  result = (bool)((quad_keys::longitude const *)arg1)->operator !=((quad_keys::longitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_quad_1key_quad_1key_1javaJNI_longitude_1longitude_1difference(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  quad_keys::longitude *arg1 = (quad_keys::longitude *) 0 ;
  quad_keys::longitude *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::longitude **)&jarg1; 
  arg2 = *(quad_keys::longitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::longitude const & reference is null");
    return 0;
  } 
  result = (double)((quad_keys::longitude const *)arg1)->operator -((quad_keys::longitude const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_quad_1key_quad_1key_1javaJNI_delete_1longitude(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  quad_keys::longitude *arg1 = (quad_keys::longitude *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(quad_keys::longitude **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_com_quad_1key_quad_1key_1javaJNI_latitude_1min_1latitude_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)quad_keys::latitude::min_latitude;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_quad_1key_quad_1key_1javaJNI_latitude_1max_1latitude_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)quad_keys::latitude::max_latitude;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_new_1latitude_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  quad_keys::latitude *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (quad_keys::latitude *)new quad_keys::latitude(arg1);
  *(quad_keys::latitude **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_new_1latitude_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  quad_keys::latitude *arg1 = 0 ;
  quad_keys::latitude *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::latitude **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::latitude const & reference is null");
    return 0;
  } 
  result = (quad_keys::latitude *)new quad_keys::latitude((quad_keys::latitude const &)*arg1);
  *(quad_keys::latitude **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_latitude_1assign_1latitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  quad_keys::latitude *arg1 = (quad_keys::latitude *) 0 ;
  quad_keys::latitude *arg2 = 0 ;
  quad_keys::latitude *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::latitude **)&jarg1; 
  arg2 = *(quad_keys::latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::latitude const & reference is null");
    return 0;
  } 
  result = (quad_keys::latitude *) &(arg1)->operator =((quad_keys::latitude const &)*arg2);
  *(quad_keys::latitude **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_quad_1key_quad_1key_1javaJNI_latitude_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  quad_keys::latitude *arg1 = (quad_keys::latitude *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::latitude **)&jarg1; 
  result = (double)((quad_keys::latitude const *)arg1)->val();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_latitude_1near_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ;
  quad_keys::latitude *arg1 = (quad_keys::latitude *) 0 ;
  quad_keys::latitude *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::latitude **)&jarg1; 
  arg2 = *(quad_keys::latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::latitude const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)((quad_keys::latitude const *)arg1)->near((quad_keys::latitude const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_latitude_1near_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  quad_keys::latitude *arg1 = (quad_keys::latitude *) 0 ;
  quad_keys::latitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::latitude **)&jarg1; 
  arg2 = *(quad_keys::latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::latitude const & reference is null");
    return 0;
  } 
  result = (bool)((quad_keys::latitude const *)arg1)->near((quad_keys::latitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_latitude_1less_1than(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  quad_keys::latitude *arg1 = (quad_keys::latitude *) 0 ;
  quad_keys::latitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::latitude **)&jarg1; 
  arg2 = *(quad_keys::latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::latitude const & reference is null");
    return 0;
  } 
  result = (bool)((quad_keys::latitude const *)arg1)->operator <((quad_keys::latitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_latitude_1less_1than_1or_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  quad_keys::latitude *arg1 = (quad_keys::latitude *) 0 ;
  quad_keys::latitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::latitude **)&jarg1; 
  arg2 = *(quad_keys::latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::latitude const & reference is null");
    return 0;
  } 
  result = (bool)((quad_keys::latitude const *)arg1)->operator <=((quad_keys::latitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_latitude_1greater_1than(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  quad_keys::latitude *arg1 = (quad_keys::latitude *) 0 ;
  quad_keys::latitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::latitude **)&jarg1; 
  arg2 = *(quad_keys::latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::latitude const & reference is null");
    return 0;
  } 
  result = (bool)((quad_keys::latitude const *)arg1)->operator >((quad_keys::latitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_latitude_1greater_1than_1or_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  quad_keys::latitude *arg1 = (quad_keys::latitude *) 0 ;
  quad_keys::latitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::latitude **)&jarg1; 
  arg2 = *(quad_keys::latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::latitude const & reference is null");
    return 0;
  } 
  result = (bool)((quad_keys::latitude const *)arg1)->operator >=((quad_keys::latitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_latitude_1equal_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  quad_keys::latitude *arg1 = (quad_keys::latitude *) 0 ;
  quad_keys::latitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::latitude **)&jarg1; 
  arg2 = *(quad_keys::latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::latitude const & reference is null");
    return 0;
  } 
  result = (bool)((quad_keys::latitude const *)arg1)->operator ==((quad_keys::latitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_latitude_1not_1equal_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  quad_keys::latitude *arg1 = (quad_keys::latitude *) 0 ;
  quad_keys::latitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::latitude **)&jarg1; 
  arg2 = *(quad_keys::latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::latitude const & reference is null");
    return 0;
  } 
  result = (bool)((quad_keys::latitude const *)arg1)->operator !=((quad_keys::latitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_quad_1key_quad_1key_1javaJNI_latitude_1latitude_1difference(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  quad_keys::latitude *arg1 = (quad_keys::latitude *) 0 ;
  quad_keys::latitude *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::latitude **)&jarg1; 
  arg2 = *(quad_keys::latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::latitude const & reference is null");
    return 0;
  } 
  result = (double)((quad_keys::latitude const *)arg1)->operator -((quad_keys::latitude const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_quad_1key_quad_1key_1javaJNI_delete_1latitude(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  quad_keys::latitude *arg1 = (quad_keys::latitude *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(quad_keys::latitude **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_new_1geo_1coordinate2d_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  quad_keys::geo_coordinate2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (quad_keys::geo_coordinate2d *)new quad_keys::geo_coordinate2d();
  *(quad_keys::geo_coordinate2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_new_1geo_1coordinate2d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  quad_keys::longitude *arg1 = 0 ;
  quad_keys::latitude *arg2 = 0 ;
  quad_keys::geo_coordinate2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::longitude **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::longitude const & reference is null");
    return 0;
  } 
  arg2 = *(quad_keys::latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::latitude const & reference is null");
    return 0;
  } 
  result = (quad_keys::geo_coordinate2d *)new quad_keys::geo_coordinate2d((quad_keys::longitude const &)*arg1,(quad_keys::latitude const &)*arg2);
  *(quad_keys::geo_coordinate2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_new_1geo_1coordinate2d_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  quad_keys::geo_coordinate2d *arg1 = 0 ;
  quad_keys::geo_coordinate2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::geo_coordinate2d **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::geo_coordinate2d const & reference is null");
    return 0;
  } 
  result = (quad_keys::geo_coordinate2d *)new quad_keys::geo_coordinate2d((quad_keys::geo_coordinate2d const &)*arg1);
  *(quad_keys::geo_coordinate2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_geo_1coordinate2d_1assign_1geo_1coordinate2d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  quad_keys::geo_coordinate2d *arg1 = (quad_keys::geo_coordinate2d *) 0 ;
  quad_keys::geo_coordinate2d *arg2 = 0 ;
  quad_keys::geo_coordinate2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::geo_coordinate2d **)&jarg1; 
  arg2 = *(quad_keys::geo_coordinate2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::geo_coordinate2d const & reference is null");
    return 0;
  } 
  result = (quad_keys::geo_coordinate2d *) &(arg1)->operator =((quad_keys::geo_coordinate2d const &)*arg2);
  *(quad_keys::geo_coordinate2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_quad_1key_quad_1key_1javaJNI_geo_1coordinate2d_1set_1longitude_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  quad_keys::geo_coordinate2d *arg1 = (quad_keys::geo_coordinate2d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::geo_coordinate2d **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_longitude(arg2);
}


SWIGEXPORT void JNICALL Java_com_quad_1key_quad_1key_1javaJNI_geo_1coordinate2d_1set_1latitude_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  quad_keys::geo_coordinate2d *arg1 = (quad_keys::geo_coordinate2d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::geo_coordinate2d **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_latitude(arg2);
}


SWIGEXPORT void JNICALL Java_com_quad_1key_quad_1key_1javaJNI_geo_1coordinate2d_1set_1longitude_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  quad_keys::geo_coordinate2d *arg1 = (quad_keys::geo_coordinate2d *) 0 ;
  quad_keys::longitude *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::geo_coordinate2d **)&jarg1; 
  arg2 = *(quad_keys::longitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::longitude const & reference is null");
    return ;
  } 
  (arg1)->set_longitude((quad_keys::longitude const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_quad_1key_quad_1key_1javaJNI_geo_1coordinate2d_1set_1latitude_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  quad_keys::geo_coordinate2d *arg1 = (quad_keys::geo_coordinate2d *) 0 ;
  quad_keys::latitude *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::geo_coordinate2d **)&jarg1; 
  arg2 = *(quad_keys::latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::latitude const & reference is null");
    return ;
  } 
  (arg1)->set_latitude((quad_keys::latitude const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_geo_1coordinate2d_1get_1longitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  quad_keys::geo_coordinate2d *arg1 = (quad_keys::geo_coordinate2d *) 0 ;
  quad_keys::longitude *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::geo_coordinate2d **)&jarg1; 
  result = (quad_keys::longitude *) &((quad_keys::geo_coordinate2d const *)arg1)->get_longitude();
  *(quad_keys::longitude **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_geo_1coordinate2d_1get_1latitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  quad_keys::geo_coordinate2d *arg1 = (quad_keys::geo_coordinate2d *) 0 ;
  quad_keys::latitude *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::geo_coordinate2d **)&jarg1; 
  result = (quad_keys::latitude *) &((quad_keys::geo_coordinate2d const *)arg1)->get_latitude();
  *(quad_keys::latitude **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_geo_1coordinate2d_1near_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ;
  quad_keys::geo_coordinate2d *arg1 = (quad_keys::geo_coordinate2d *) 0 ;
  quad_keys::geo_coordinate2d *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::geo_coordinate2d **)&jarg1; 
  arg2 = *(quad_keys::geo_coordinate2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::geo_coordinate2d const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)((quad_keys::geo_coordinate2d const *)arg1)->near((quad_keys::geo_coordinate2d const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_geo_1coordinate2d_1near_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  quad_keys::geo_coordinate2d *arg1 = (quad_keys::geo_coordinate2d *) 0 ;
  quad_keys::geo_coordinate2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::geo_coordinate2d **)&jarg1; 
  arg2 = *(quad_keys::geo_coordinate2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::geo_coordinate2d const & reference is null");
    return 0;
  } 
  result = (bool)((quad_keys::geo_coordinate2d const *)arg1)->near((quad_keys::geo_coordinate2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_geo_1coordinate2d_1equal_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  quad_keys::geo_coordinate2d *arg1 = (quad_keys::geo_coordinate2d *) 0 ;
  quad_keys::geo_coordinate2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::geo_coordinate2d **)&jarg1; 
  arg2 = *(quad_keys::geo_coordinate2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::geo_coordinate2d const & reference is null");
    return 0;
  } 
  result = (bool)((quad_keys::geo_coordinate2d const *)arg1)->operator ==((quad_keys::geo_coordinate2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_geo_1coordinate2d_1notEqualTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  quad_keys::geo_coordinate2d *arg1 = (quad_keys::geo_coordinate2d *) 0 ;
  quad_keys::geo_coordinate2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::geo_coordinate2d **)&jarg1; 
  arg2 = *(quad_keys::geo_coordinate2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::geo_coordinate2d const & reference is null");
    return 0;
  } 
  result = (bool)((quad_keys::geo_coordinate2d const *)arg1)->operator !=((quad_keys::geo_coordinate2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_quad_1key_quad_1key_1javaJNI_delete_1geo_1coordinate2d(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  quad_keys::geo_coordinate2d *arg1 = (quad_keys::geo_coordinate2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(quad_keys::geo_coordinate2d **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_new_1geo_1coordinate_1bounding_1box2d_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  quad_keys::geo_coordinate_bounding_box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (quad_keys::geo_coordinate_bounding_box2d *)new quad_keys::geo_coordinate_bounding_box2d();
  *(quad_keys::geo_coordinate_bounding_box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_new_1geo_1coordinate_1bounding_1box2d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  quad_keys::geo_coordinate2d *arg1 = 0 ;
  quad_keys::geo_coordinate2d *arg2 = 0 ;
  quad_keys::geo_coordinate_bounding_box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::geo_coordinate2d **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::geo_coordinate2d const & reference is null");
    return 0;
  } 
  arg2 = *(quad_keys::geo_coordinate2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::geo_coordinate2d const & reference is null");
    return 0;
  } 
  result = (quad_keys::geo_coordinate_bounding_box2d *)new quad_keys::geo_coordinate_bounding_box2d((quad_keys::geo_coordinate2d const &)*arg1,(quad_keys::geo_coordinate2d const &)*arg2);
  *(quad_keys::geo_coordinate_bounding_box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_geo_1coordinate_1bounding_1box2d_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  quad_keys::geo_coordinate_bounding_box2d *arg1 = (quad_keys::geo_coordinate_bounding_box2d *) 0 ;
  quad_keys::geo_coordinate2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::geo_coordinate_bounding_box2d **)&jarg1; 
  arg2 = *(quad_keys::geo_coordinate2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::geo_coordinate2d const & reference is null");
    return 0;
  } 
  result = (bool)((quad_keys::geo_coordinate_bounding_box2d const *)arg1)->contains((quad_keys::geo_coordinate2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_quad_1key_quad_1key_1javaJNI_geo_1coordinate_1bounding_1box2d_1grow_1to_1contain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  quad_keys::geo_coordinate_bounding_box2d *arg1 = (quad_keys::geo_coordinate_bounding_box2d *) 0 ;
  quad_keys::geo_coordinate2d *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::geo_coordinate_bounding_box2d **)&jarg1; 
  arg2 = *(quad_keys::geo_coordinate2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::geo_coordinate2d const & reference is null");
    return ;
  } 
  (arg1)->grow_to_contain((quad_keys::geo_coordinate2d const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_geo_1coordinate_1bounding_1box2d_1lower_1left(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  quad_keys::geo_coordinate_bounding_box2d *arg1 = (quad_keys::geo_coordinate_bounding_box2d *) 0 ;
  quad_keys::geo_coordinate2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::geo_coordinate_bounding_box2d **)&jarg1; 
  result = (quad_keys::geo_coordinate2d *) &((quad_keys::geo_coordinate_bounding_box2d const *)arg1)->lower_left();
  *(quad_keys::geo_coordinate2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_geo_1coordinate_1bounding_1box2d_1upper_1right(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  quad_keys::geo_coordinate_bounding_box2d *arg1 = (quad_keys::geo_coordinate_bounding_box2d *) 0 ;
  quad_keys::geo_coordinate2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::geo_coordinate_bounding_box2d **)&jarg1; 
  result = (quad_keys::geo_coordinate2d *) &((quad_keys::geo_coordinate_bounding_box2d const *)arg1)->upper_right();
  *(quad_keys::geo_coordinate2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_geo_1coordinate_1bounding_1box2d_1upper_1left(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  quad_keys::geo_coordinate_bounding_box2d *arg1 = (quad_keys::geo_coordinate_bounding_box2d *) 0 ;
  quad_keys::geo_coordinate2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::geo_coordinate_bounding_box2d **)&jarg1; 
  result = ((quad_keys::geo_coordinate_bounding_box2d const *)arg1)->upper_left();
  *(quad_keys::geo_coordinate2d **)&jresult = new quad_keys::geo_coordinate2d((const quad_keys::geo_coordinate2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_geo_1coordinate_1bounding_1box2d_1lower_1right(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  quad_keys::geo_coordinate_bounding_box2d *arg1 = (quad_keys::geo_coordinate_bounding_box2d *) 0 ;
  quad_keys::geo_coordinate2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::geo_coordinate_bounding_box2d **)&jarg1; 
  result = ((quad_keys::geo_coordinate_bounding_box2d const *)arg1)->lower_right();
  *(quad_keys::geo_coordinate2d **)&jresult = new quad_keys::geo_coordinate2d((const quad_keys::geo_coordinate2d &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_geo_1coordinate_1bounding_1box2d_1is_1valid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  quad_keys::geo_coordinate_bounding_box2d *arg1 = (quad_keys::geo_coordinate_bounding_box2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::geo_coordinate_bounding_box2d **)&jarg1; 
  result = (bool)((quad_keys::geo_coordinate_bounding_box2d const *)arg1)->is_valid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_quad_1key_quad_1key_1javaJNI_delete_1geo_1coordinate_1bounding_1box2d(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  quad_keys::geo_coordinate_bounding_box2d *arg1 = (quad_keys::geo_coordinate_bounding_box2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(quad_keys::geo_coordinate_bounding_box2d **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_quad_1key_quad_1key_1javaJNI_type_1to_1string(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  quad_keys::type arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (quad_keys::type)jarg1; 
  result = quad_keys::type_to_string(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1quadrant_1south_1west_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  quad_keys::quad_key::quadrant result;
  
  (void)jenv;
  (void)jcls;
  result = (quad_keys::quad_key::quadrant)quad_keys::quad_key::quadrant::south_west;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1quadrant_1south_1east_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  quad_keys::quad_key::quadrant result;
  
  (void)jenv;
  (void)jcls;
  result = (quad_keys::quad_key::quadrant)quad_keys::quad_key::quadrant::south_east;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1quadrant_1north_1west_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  quad_keys::quad_key::quadrant result;
  
  (void)jenv;
  (void)jcls;
  result = (quad_keys::quad_key::quadrant)quad_keys::quad_key::quadrant::north_west;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1quadrant_1north_1east_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  quad_keys::quad_key::quadrant result;
  
  (void)jenv;
  (void)jcls;
  result = (quad_keys::quad_key::quadrant)quad_keys::quad_key::quadrant::north_east;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_new_1quad_1key_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  quad_keys::quad_key *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (quad_keys::quad_key *)new quad_keys::quad_key();
  *(quad_keys::quad_key **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_new_1quad_1key_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  quad_keys::type arg1 ;
  quad_keys::quad_key *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (quad_keys::type)jarg1; 
  result = (quad_keys::quad_key *)new quad_keys::quad_key(arg1);
  *(quad_keys::quad_key **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_new_1quad_1key_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3, jshort jarg4) {
  jlong jresult = 0 ;
  quad_keys::type arg1 ;
  std::uint32_t arg2 ;
  std::uint32_t arg3 ;
  std::uint8_t arg4 ;
  quad_keys::quad_key *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (quad_keys::type)jarg1; 
  arg2 = (std::uint32_t)jarg2; 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (std::uint8_t)jarg4; 
  result = (quad_keys::quad_key *)new quad_keys::quad_key(arg1,arg2,arg3,arg4);
  *(quad_keys::quad_key **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_new_1quad_1key_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  quad_keys::quad_key *arg1 = 0 ;
  quad_keys::quad_key *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::quad_key **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::quad_key const & reference is null");
    return 0;
  } 
  result = (quad_keys::quad_key *)new quad_keys::quad_key((quad_keys::quad_key const &)*arg1);
  *(quad_keys::quad_key **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1assignquad_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  quad_keys::quad_key *arg1 = (quad_keys::quad_key *) 0 ;
  quad_keys::quad_key *arg2 = 0 ;
  quad_keys::quad_key *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::quad_key **)&jarg1; 
  arg2 = *(quad_keys::quad_key **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::quad_key const & reference is null");
    return 0;
  } 
  result = (quad_keys::quad_key *) &(arg1)->operator =((quad_keys::quad_key const &)*arg2);
  *(quad_keys::quad_key **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  quad_keys::quad_key *arg1 = (quad_keys::quad_key *) 0 ;
  quad_keys::type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::quad_key **)&jarg1; 
  result = (quad_keys::type)((quad_keys::quad_key const *)arg1)->get_type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1type_1as_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  quad_keys::quad_key *arg1 = (quad_keys::quad_key *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::quad_key **)&jarg1; 
  result = ((quad_keys::quad_key const *)arg1)->type_as_string();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1get_1row(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  quad_keys::quad_key *arg1 = (quad_keys::quad_key *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::quad_key **)&jarg1; 
  result = (std::uint32_t)((quad_keys::quad_key const *)arg1)->get_row();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1get_1col(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  quad_keys::quad_key *arg1 = (quad_keys::quad_key *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::quad_key **)&jarg1; 
  result = (std::uint32_t)((quad_keys::quad_key const *)arg1)->get_col();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1get_1depth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  quad_keys::quad_key *arg1 = (quad_keys::quad_key *) 0 ;
  std::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::quad_key **)&jarg1; 
  result = (std::uint8_t)((quad_keys::quad_key const *)arg1)->get_depth();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1is_1root_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  quad_keys::quad_key *arg1 = (quad_keys::quad_key *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::quad_key **)&jarg1; 
  result = (bool)((quad_keys::quad_key const *)arg1)->is_root_key();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1get_1parent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  quad_keys::quad_key *arg1 = (quad_keys::quad_key *) 0 ;
  quad_keys::quad_key result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::quad_key **)&jarg1; 
  result = ((quad_keys::quad_key const *)arg1)->get_parent();
  *(quad_keys::quad_key **)&jresult = new quad_keys::quad_key((const quad_keys::quad_key &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1is_1my_1ancestor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  quad_keys::quad_key *arg1 = (quad_keys::quad_key *) 0 ;
  quad_keys::quad_key *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::quad_key **)&jarg1; 
  arg2 = *(quad_keys::quad_key **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::quad_key const & reference is null");
    return 0;
  } 
  result = (bool)((quad_keys::quad_key const *)arg1)->is_my_ancestor((quad_keys::quad_key const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1get_1ancestor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  quad_keys::quad_key *arg1 = (quad_keys::quad_key *) 0 ;
  std::uint8_t arg2 ;
  quad_keys::quad_key result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::quad_key **)&jarg1; 
  arg2 = (std::uint8_t)jarg2; 
  result = ((quad_keys::quad_key const *)arg1)->get_ancestor(arg2);
  *(quad_keys::quad_key **)&jresult = new quad_keys::quad_key((const quad_keys::quad_key &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1get_1child(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  quad_keys::quad_key *arg1 = (quad_keys::quad_key *) 0 ;
  quad_keys::quad_key::quadrant arg2 ;
  quad_keys::quad_key result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::quad_key **)&jarg1; 
  arg2 = (quad_keys::quad_key::quadrant)jarg2; 
  result = ((quad_keys::quad_key const *)arg1)->get_child(arg2);
  *(quad_keys::quad_key **)&jresult = new quad_keys::quad_key((const quad_keys::quad_key &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1get_1children(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  quad_keys::quad_key *arg1 = (quad_keys::quad_key *) 0 ;
  std::vector< quad_keys::quad_key > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::quad_key **)&jarg1; 
  result = ((quad_keys::quad_key const *)arg1)->get_children();
  *(std::vector< quad_keys::quad_key > **)&jresult = new std::vector< quad_keys::quad_key >((const std::vector< quad_keys::quad_key > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1get_1descendants(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  quad_keys::quad_key *arg1 = (quad_keys::quad_key *) 0 ;
  std::uint8_t arg2 ;
  std::vector< quad_keys::quad_key > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::quad_key **)&jarg1; 
  arg2 = (std::uint8_t)jarg2; 
  result = ((quad_keys::quad_key const *)arg1)->get_descendants(arg2);
  *(std::vector< quad_keys::quad_key > **)&jresult = new std::vector< quad_keys::quad_key >((const std::vector< quad_keys::quad_key > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1get_1siblings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  quad_keys::quad_key *arg1 = (quad_keys::quad_key *) 0 ;
  std::vector< quad_keys::quad_key > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::quad_key **)&jarg1; 
  result = ((quad_keys::quad_key const *)arg1)->get_siblings();
  *(std::vector< quad_keys::quad_key > **)&jresult = new std::vector< quad_keys::quad_key >((const std::vector< quad_keys::quad_key > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1get_1neighbors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  quad_keys::quad_key *arg1 = (quad_keys::quad_key *) 0 ;
  std::vector< quad_keys::quad_key > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::quad_key **)&jarg1; 
  result = ((quad_keys::quad_key const *)arg1)->get_neighbors();
  *(std::vector< quad_keys::quad_key > **)&jresult = new std::vector< quad_keys::quad_key >((const std::vector< quad_keys::quad_key > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1get_1geo_1coordinate_1bounds2d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  quad_keys::quad_key *arg1 = (quad_keys::quad_key *) 0 ;
  quad_keys::geo_coordinate_bounding_box2d *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::quad_key **)&jarg1; 
  arg2 = *(quad_keys::geo_coordinate_bounding_box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::geo_coordinate_bounding_box2d & reference is null");
    return ;
  } 
  ((quad_keys::quad_key const *)arg1)->get_geo_coordinate_bounds2d(*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1to_1internal_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  quad_keys::quad_key *arg1 = (quad_keys::quad_key *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quad_keys::quad_key **)&jarg1; 
  result = ((quad_keys::quad_key const *)arg1)->to_internal_string();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1from_1internal_1string(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  quad_keys::type arg1 ;
  std::string *arg2 = 0 ;
  quad_keys::quad_key result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (quad_keys::type)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = quad_keys::quad_key::from_internal_string(arg1,(std::string const &)*arg2);
  *(quad_keys::quad_key **)&jresult = new quad_keys::quad_key((const quad_keys::quad_key &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1get_1key_1from_1longitude_1latitude_1at_1depth(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jshort jarg3) {
  jlong jresult = 0 ;
  quad_keys::type arg1 ;
  quad_keys::geo_coordinate2d *arg2 = 0 ;
  std::uint8_t arg3 ;
  quad_keys::quad_key result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (quad_keys::type)jarg1; 
  arg2 = *(quad_keys::geo_coordinate2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::geo_coordinate2d const & reference is null");
    return 0;
  } 
  arg3 = (std::uint8_t)jarg3; 
  result = quad_keys::quad_key::get_key_from_longitude_latitude_at_depth(arg1,(quad_keys::geo_coordinate2d const &)*arg2,arg3);
  *(quad_keys::quad_key **)&jresult = new quad_keys::quad_key((const quad_keys::quad_key &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1get_1keys_1from_1longitude_1latitude_1bounding_1box(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jshort jarg3) {
  jlong jresult = 0 ;
  quad_keys::type arg1 ;
  quad_keys::geo_coordinate_bounding_box2d *arg2 = 0 ;
  std::uint8_t arg3 ;
  std::vector< quad_keys::quad_key > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (quad_keys::type)jarg1; 
  arg2 = *(quad_keys::geo_coordinate_bounding_box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::geo_coordinate_bounding_box2d const & reference is null");
    return 0;
  } 
  arg3 = (std::uint8_t)jarg3; 
  result = quad_keys::quad_key::get_keys_from_longitude_latitude_bounding_box(arg1,(quad_keys::geo_coordinate_bounding_box2d const &)*arg2,arg3);
  *(std::vector< quad_keys::quad_key > **)&jresult = new std::vector< quad_keys::quad_key >((const std::vector< quad_keys::quad_key > &)result); 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1max_1depth(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jshort jresult = 0 ;
  quad_keys::type arg1 ;
  std::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (quad_keys::type)jarg1; 
  result = (std::uint8_t)quad_keys::quad_key::max_depth(arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1max_1rows(JNIEnv *jenv, jclass jcls, jint jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  quad_keys::type arg1 ;
  std::uint8_t arg2 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (quad_keys::type)jarg1; 
  arg2 = (std::uint8_t)jarg2; 
  result = (std::uint32_t)quad_keys::quad_key::max_rows(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1max_1cols(JNIEnv *jenv, jclass jcls, jint jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  quad_keys::type arg1 ;
  std::uint8_t arg2 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (quad_keys::type)jarg1; 
  arg2 = (std::uint8_t)jarg2; 
  result = (std::uint32_t)quad_keys::quad_key::max_cols(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1max_1tiles(JNIEnv *jenv, jclass jcls, jint jarg1, jshort jarg2) {
  jobject jresult = 0 ;
  quad_keys::type arg1 ;
  std::uint8_t arg2 ;
  std::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (quad_keys::type)jarg1; 
  arg2 = (std::uint8_t)jarg2; 
  result = (std::uint64_t)quad_keys::quad_key::max_tiles(arg1,arg2);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1less_1than(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  quad_keys::quad_key *arg1 = (quad_keys::quad_key *) 0 ;
  quad_keys::quad_key *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::quad_key **)&jarg1; 
  arg2 = *(quad_keys::quad_key **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::quad_key const & reference is null");
    return 0;
  } 
  result = (bool)((quad_keys::quad_key const *)arg1)->operator <((quad_keys::quad_key const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1equal_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  quad_keys::quad_key *arg1 = (quad_keys::quad_key *) 0 ;
  quad_keys::quad_key *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::quad_key **)&jarg1; 
  arg2 = *(quad_keys::quad_key **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::quad_key const & reference is null");
    return 0;
  } 
  result = (bool)((quad_keys::quad_key const *)arg1)->operator ==((quad_keys::quad_key const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1not_1equal_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  quad_keys::quad_key *arg1 = (quad_keys::quad_key *) 0 ;
  quad_keys::quad_key *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quad_keys::quad_key **)&jarg1; 
  arg2 = *(quad_keys::quad_key **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "quad_keys::quad_key const & reference is null");
    return 0;
  } 
  result = (bool)((quad_keys::quad_key const *)arg1)->operator !=((quad_keys::quad_key const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_quad_1key_quad_1key_1javaJNI_delete_1quad_1key(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  quad_keys::quad_key *arg1 = (quad_keys::quad_key *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(quad_keys::quad_key **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_new_1quad_1key_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< quad_keys::quad_key > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< quad_keys::quad_key > *)new std::vector< quad_keys::quad_key >();
  *(std::vector< quad_keys::quad_key > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_new_1quad_1key_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< quad_keys::quad_key >::size_type arg1 ;
  std::vector< quad_keys::quad_key > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< quad_keys::quad_key >::size_type)jarg1; 
  result = (std::vector< quad_keys::quad_key > *)new std::vector< quad_keys::quad_key >(arg1);
  *(std::vector< quad_keys::quad_key > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< quad_keys::quad_key > *arg1 = (std::vector< quad_keys::quad_key > *) 0 ;
  std::vector< quad_keys::quad_key >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< quad_keys::quad_key > **)&jarg1; 
  result = ((std::vector< quad_keys::quad_key > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< quad_keys::quad_key > *arg1 = (std::vector< quad_keys::quad_key > *) 0 ;
  std::vector< quad_keys::quad_key >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< quad_keys::quad_key > **)&jarg1; 
  result = ((std::vector< quad_keys::quad_key > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< quad_keys::quad_key > *arg1 = (std::vector< quad_keys::quad_key > *) 0 ;
  std::vector< quad_keys::quad_key >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< quad_keys::quad_key > **)&jarg1; 
  arg2 = (std::vector< quad_keys::quad_key >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< quad_keys::quad_key > *arg1 = (std::vector< quad_keys::quad_key > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< quad_keys::quad_key > **)&jarg1; 
  result = (bool)((std::vector< quad_keys::quad_key > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< quad_keys::quad_key > *arg1 = (std::vector< quad_keys::quad_key > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< quad_keys::quad_key > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< quad_keys::quad_key > *arg1 = (std::vector< quad_keys::quad_key > *) 0 ;
  std::vector< quad_keys::quad_key >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< quad_keys::quad_key > **)&jarg1; 
  arg2 = *(std::vector< quad_keys::quad_key >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< quad_keys::quad_key >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< quad_keys::quad_key >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< quad_keys::quad_key > *arg1 = (std::vector< quad_keys::quad_key > *) 0 ;
  int arg2 ;
  std::vector< quad_keys::quad_key >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< quad_keys::quad_key > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< quad_keys::quad_key >::value_type *) &std_vector_Sl_quad_keys_quad_key_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< quad_keys::quad_key >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_quad_1key_quad_1key_1javaJNI_quad_1key_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< quad_keys::quad_key > *arg1 = (std::vector< quad_keys::quad_key > *) 0 ;
  int arg2 ;
  std::vector< quad_keys::quad_key >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< quad_keys::quad_key > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< quad_keys::quad_key >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< quad_keys::quad_key >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_quad_keys_quad_key_Sg__set(arg1,arg2,(quad_keys::quad_key const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_quad_1key_quad_1key_1javaJNI_delete_1quad_1key_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< quad_keys::quad_key > *arg1 = (std::vector< quad_keys::quad_key > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< quad_keys::quad_key > **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

