"""
Boot strap for unit tests.
"""

from __future__ import print_function

import argparse
import glob
import importlib
import inspect
import os
import re
import shutil
import sys


# For windows only we need to know the type of shared library built.
PARSER = argparse.ArgumentParser(description='Command line arguments')
PARSER.add_argument('-c', '--configuration', nargs=1,
    help='(Debug|Release)', choices=['Debug', 'Release'])
ARGS = PARSER.parse_args()

# Load code generated by swig
SCRIPTPATH = os.path.dirname(os.path.abspath(inspect.stack()[0][1]))
sys.path.append(os.path.join(SCRIPTPATH, os.path.normpath("../Swig/python")))

# Now we need the generated shared library as a python module
BINMOD = None
PYMOD = None
if os.name == 'posix':
    BINMOD = '../build/QuadKey/libQuadKey.so'
    PYMOD = '_quadkey.so'
elif os.name == 'nt':
    BINMOD = os.path.join('../build/QuadKey/', ARGS.configuration[0])
    BINMOD = os.path.join(BINMOD, 'QuadKey.dll')
    PYMOD = '_quadkey.pyd'
else:
    raise Exception('Invalid OS')


def main():
    """
    Bootstrap function
    """
    shutil.copyfile(BINMOD, PYMOD)
    shutil.copymode(BINMOD, PYMOD)

    # Find all files that have a class in the directory of this script and
    # call main function which runs unit tests.
    regex = re.compile(r'^class\s')
    for file_handle in glob.glob('./*.py'):
        relpath = os.path.realpath(file_handle)
        classes = [l for l in open(relpath) if re.match(regex, l)]
        for klass in classes:
            if os.name == 'posix':
                module = file_handle.replace('.py', '').replace('./', '')
                module = importlib.import_module(module)
                print("Importing: ", klass)
            elif os.name == 'nt':
                module = file_handle.replace('.py', '').replace('.\\', '')
                module = __import__(module)
                print("Importing: ", klass)
            module.main()


if __name__ == "__main__":
    main()
