# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_quad_key')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_quad_key')
    _quad_key = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_quad_key', [dirname(__file__)])
        except ImportError:
            import _quad_key
            return _quad_key
        try:
            _mod = imp.load_module('_quad_key', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _quad_key = swig_import_helper()
    del swig_import_helper
else:
    import _quad_key
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class longitude(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, longitude, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, longitude, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _quad_key.new_longitude(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def val(self):
        return _quad_key.longitude_val(self)

    def near(self, *args):
        return _quad_key.longitude_near(self, *args)

    def __lt__(self, rhs):
        return _quad_key.longitude___lt__(self, rhs)

    def __le__(self, rhs):
        return _quad_key.longitude___le__(self, rhs)

    def __gt__(self, rhs):
        return _quad_key.longitude___gt__(self, rhs)

    def __ge__(self, rhs):
        return _quad_key.longitude___ge__(self, rhs)

    def __eq__(self, rhs):
        return _quad_key.longitude___eq__(self, rhs)

    def __ne__(self, rhs):
        return _quad_key.longitude___ne__(self, rhs)

    def __sub__(self, subtrahend):
        return _quad_key.longitude___sub__(self, subtrahend)
    __swig_destroy__ = _quad_key.delete_longitude
    __del__ = lambda self: None
longitude_swigregister = _quad_key.longitude_swigregister
longitude_swigregister(longitude)
cvar = _quad_key.cvar
longitude.min_longitude = _quad_key.cvar.longitude_min_longitude
longitude.max_longitude = _quad_key.cvar.longitude_max_longitude

class latitude(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, latitude, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, latitude, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _quad_key.new_latitude(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def val(self):
        return _quad_key.latitude_val(self)

    def near(self, *args):
        return _quad_key.latitude_near(self, *args)

    def __lt__(self, rhs):
        return _quad_key.latitude___lt__(self, rhs)

    def __le__(self, rhs):
        return _quad_key.latitude___le__(self, rhs)

    def __gt__(self, rhs):
        return _quad_key.latitude___gt__(self, rhs)

    def __ge__(self, rhs):
        return _quad_key.latitude___ge__(self, rhs)

    def __eq__(self, rhs):
        return _quad_key.latitude___eq__(self, rhs)

    def __ne__(self, rhs):
        return _quad_key.latitude___ne__(self, rhs)

    def __sub__(self, subtrahend):
        return _quad_key.latitude___sub__(self, subtrahend)
    __swig_destroy__ = _quad_key.delete_latitude
    __del__ = lambda self: None
latitude_swigregister = _quad_key.latitude_swigregister
latitude_swigregister(latitude)
latitude.min_latitude = _quad_key.cvar.latitude_min_latitude
latitude.max_latitude = _quad_key.cvar.latitude_max_latitude

class geo_coordinate2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, geo_coordinate2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, geo_coordinate2d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _quad_key.new_geo_coordinate2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_longitude(self, *args):
        return _quad_key.geo_coordinate2d_set_longitude(self, *args)

    def set_latitude(self, *args):
        return _quad_key.geo_coordinate2d_set_latitude(self, *args)

    def get_longitude(self):
        return _quad_key.geo_coordinate2d_get_longitude(self)

    def get_latitude(self):
        return _quad_key.geo_coordinate2d_get_latitude(self)

    def near(self, *args):
        return _quad_key.geo_coordinate2d_near(self, *args)

    def __eq__(self, rhs):
        return _quad_key.geo_coordinate2d___eq__(self, rhs)

    def __ne__(self, rhs):
        return _quad_key.geo_coordinate2d___ne__(self, rhs)
    __swig_destroy__ = _quad_key.delete_geo_coordinate2d
    __del__ = lambda self: None
geo_coordinate2d_swigregister = _quad_key.geo_coordinate2d_swigregister
geo_coordinate2d_swigregister(geo_coordinate2d)

class geo_coordinate_bounding_box2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, geo_coordinate_bounding_box2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, geo_coordinate_bounding_box2d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _quad_key.new_geo_coordinate_bounding_box2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def contains(self, coordinate):
        return _quad_key.geo_coordinate_bounding_box2d_contains(self, coordinate)

    def grow_to_contain(self, coordinate):
        return _quad_key.geo_coordinate_bounding_box2d_grow_to_contain(self, coordinate)

    def lower_left(self):
        return _quad_key.geo_coordinate_bounding_box2d_lower_left(self)

    def upper_right(self):
        return _quad_key.geo_coordinate_bounding_box2d_upper_right(self)

    def upper_left(self):
        return _quad_key.geo_coordinate_bounding_box2d_upper_left(self)

    def lower_right(self):
        return _quad_key.geo_coordinate_bounding_box2d_lower_right(self)

    def __eq__(self, rhs):
        return _quad_key.geo_coordinate_bounding_box2d___eq__(self, rhs)

    def is_valid(self):
        return _quad_key.geo_coordinate_bounding_box2d_is_valid(self)
    __swig_destroy__ = _quad_key.delete_geo_coordinate_bounding_box2d
    __del__ = lambda self: None
geo_coordinate_bounding_box2d_swigregister = _quad_key.geo_coordinate_bounding_box2d_swigregister
geo_coordinate_bounding_box2d_swigregister(geo_coordinate_bounding_box2d)

type_none = _quad_key.type_none
type_bing = _quad_key.type_bing
type_lat_long = _quad_key.type_lat_long
type_ulp_qnr = _quad_key.type_ulp_qnr
type_osgeo = _quad_key.type_osgeo
type_morton = _quad_key.type_morton

def type_to_string(t):
    return _quad_key.type_to_string(t)
type_to_string = _quad_key.type_to_string
class quad_key(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, quad_key, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, quad_key, name)
    __repr__ = _swig_repr
    quadrant_south_west = _quad_key.quad_key_quadrant_south_west
    quadrant_south_east = _quad_key.quad_key_quadrant_south_east
    quadrant_north_west = _quad_key.quad_key_quadrant_north_west
    quadrant_north_east = _quad_key.quad_key_quadrant_north_east

    def __init__(self, *args):
        this = _quad_key.new_quad_key(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_type(self):
        return _quad_key.quad_key_get_type(self)

    def type_as_string(self):
        return _quad_key.quad_key_type_as_string(self)

    def get_row(self):
        return _quad_key.quad_key_get_row(self)

    def get_col(self):
        return _quad_key.quad_key_get_col(self)

    def get_depth(self):
        return _quad_key.quad_key_get_depth(self)

    def is_root_key(self):
        return _quad_key.quad_key_is_root_key(self)

    def get_parent(self):
        return _quad_key.quad_key_get_parent(self)

    def is_my_ancestor(self, quad_key):
        return _quad_key.quad_key_is_my_ancestor(self, quad_key)

    def get_ancestor(self, depth_delta):
        return _quad_key.quad_key_get_ancestor(self, depth_delta)

    def get_child(self, quad_id):
        return _quad_key.quad_key_get_child(self, quad_id)

    def get_children(self):
        return _quad_key.quad_key_get_children(self)

    def get_descendants(self, depth_delta):
        return _quad_key.quad_key_get_descendants(self, depth_delta)

    def get_siblings(self):
        return _quad_key.quad_key_get_siblings(self)

    def get_neighbors(self):
        return _quad_key.quad_key_get_neighbors(self)

    def get_geo_coordinate_bounds2d(self, out_bounds):
        return _quad_key.quad_key_get_geo_coordinate_bounds2d(self, out_bounds)

    def to_internal_string(self):
        return _quad_key.quad_key_to_internal_string(self)
    if _newclass:
        from_internal_string = staticmethod(_quad_key.quad_key_from_internal_string)
    else:
        from_internal_string = _quad_key.quad_key_from_internal_string
    if _newclass:
        get_key_from_longitude_latitude_at_depth = staticmethod(_quad_key.quad_key_get_key_from_longitude_latitude_at_depth)
    else:
        get_key_from_longitude_latitude_at_depth = _quad_key.quad_key_get_key_from_longitude_latitude_at_depth
    if _newclass:
        get_keys_from_longitude_latitude_bounding_box = staticmethod(_quad_key.quad_key_get_keys_from_longitude_latitude_bounding_box)
    else:
        get_keys_from_longitude_latitude_bounding_box = _quad_key.quad_key_get_keys_from_longitude_latitude_bounding_box
    if _newclass:
        max_depth = staticmethod(_quad_key.quad_key_max_depth)
    else:
        max_depth = _quad_key.quad_key_max_depth
    if _newclass:
        max_rows = staticmethod(_quad_key.quad_key_max_rows)
    else:
        max_rows = _quad_key.quad_key_max_rows
    if _newclass:
        max_cols = staticmethod(_quad_key.quad_key_max_cols)
    else:
        max_cols = _quad_key.quad_key_max_cols
    if _newclass:
        max_tiles = staticmethod(_quad_key.quad_key_max_tiles)
    else:
        max_tiles = _quad_key.quad_key_max_tiles

    def __lt__(self, rhs):
        return _quad_key.quad_key___lt__(self, rhs)

    def __eq__(self, rhs):
        return _quad_key.quad_key___eq__(self, rhs)

    def __ne__(self, rhs):
        return _quad_key.quad_key___ne__(self, rhs)
    __swig_destroy__ = _quad_key.delete_quad_key
    __del__ = lambda self: None
quad_key_swigregister = _quad_key.quad_key_swigregister
quad_key_swigregister(quad_key)

def quad_key_from_internal_string(t, in_string):
    return _quad_key.quad_key_from_internal_string(t, in_string)
quad_key_from_internal_string = _quad_key.quad_key_from_internal_string

def quad_key_get_key_from_longitude_latitude_at_depth(t, coords, depth):
    return _quad_key.quad_key_get_key_from_longitude_latitude_at_depth(t, coords, depth)
quad_key_get_key_from_longitude_latitude_at_depth = _quad_key.quad_key_get_key_from_longitude_latitude_at_depth

def quad_key_get_keys_from_longitude_latitude_bounding_box(t, bounds, depth):
    return _quad_key.quad_key_get_keys_from_longitude_latitude_bounding_box(t, bounds, depth)
quad_key_get_keys_from_longitude_latitude_bounding_box = _quad_key.quad_key_get_keys_from_longitude_latitude_bounding_box

def quad_key_max_depth(t):
    return _quad_key.quad_key_max_depth(t)
quad_key_max_depth = _quad_key.quad_key_max_depth

def quad_key_max_rows(t, depth):
    return _quad_key.quad_key_max_rows(t, depth)
quad_key_max_rows = _quad_key.quad_key_max_rows

def quad_key_max_cols(t, depth):
    return _quad_key.quad_key_max_cols(t, depth)
quad_key_max_cols = _quad_key.quad_key_max_cols

def quad_key_max_tiles(t, depth):
    return _quad_key.quad_key_max_tiles(t, depth)
quad_key_max_tiles = _quad_key.quad_key_max_tiles

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quad_key.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _quad_key.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _quad_key.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _quad_key.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _quad_key.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _quad_key.SwigPyIterator_equal(self, x)

    def copy(self):
        return _quad_key.SwigPyIterator_copy(self)

    def next(self):
        return _quad_key.SwigPyIterator_next(self)

    def __next__(self):
        return _quad_key.SwigPyIterator___next__(self)

    def previous(self):
        return _quad_key.SwigPyIterator_previous(self)

    def advance(self, n):
        return _quad_key.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _quad_key.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _quad_key.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _quad_key.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _quad_key.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _quad_key.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _quad_key.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _quad_key.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class quad_key_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, quad_key_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, quad_key_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _quad_key.quad_key_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _quad_key.quad_key_vector___nonzero__(self)

    def __bool__(self):
        return _quad_key.quad_key_vector___bool__(self)

    def __len__(self):
        return _quad_key.quad_key_vector___len__(self)

    def __getslice__(self, i, j):
        return _quad_key.quad_key_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _quad_key.quad_key_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _quad_key.quad_key_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _quad_key.quad_key_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _quad_key.quad_key_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _quad_key.quad_key_vector___setitem__(self, *args)

    def pop(self):
        return _quad_key.quad_key_vector_pop(self)

    def append(self, x):
        return _quad_key.quad_key_vector_append(self, x)

    def empty(self):
        return _quad_key.quad_key_vector_empty(self)

    def size(self):
        return _quad_key.quad_key_vector_size(self)

    def swap(self, v):
        return _quad_key.quad_key_vector_swap(self, v)

    def begin(self):
        return _quad_key.quad_key_vector_begin(self)

    def end(self):
        return _quad_key.quad_key_vector_end(self)

    def rbegin(self):
        return _quad_key.quad_key_vector_rbegin(self)

    def rend(self):
        return _quad_key.quad_key_vector_rend(self)

    def clear(self):
        return _quad_key.quad_key_vector_clear(self)

    def get_allocator(self):
        return _quad_key.quad_key_vector_get_allocator(self)

    def pop_back(self):
        return _quad_key.quad_key_vector_pop_back(self)

    def erase(self, *args):
        return _quad_key.quad_key_vector_erase(self, *args)

    def __init__(self, *args):
        this = _quad_key.new_quad_key_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _quad_key.quad_key_vector_push_back(self, x)

    def front(self):
        return _quad_key.quad_key_vector_front(self)

    def back(self):
        return _quad_key.quad_key_vector_back(self)

    def assign(self, n, x):
        return _quad_key.quad_key_vector_assign(self, n, x)

    def resize(self, *args):
        return _quad_key.quad_key_vector_resize(self, *args)

    def insert(self, *args):
        return _quad_key.quad_key_vector_insert(self, *args)

    def reserve(self, n):
        return _quad_key.quad_key_vector_reserve(self, n)

    def capacity(self):
        return _quad_key.quad_key_vector_capacity(self)
    __swig_destroy__ = _quad_key.delete_quad_key_vector
    __del__ = lambda self: None
quad_key_vector_swigregister = _quad_key.quad_key_vector_swigregister
quad_key_vector_swigregister(quad_key_vector)

# This file is compatible with both classic and new-style classes.


