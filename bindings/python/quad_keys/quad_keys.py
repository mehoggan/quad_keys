# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _quad_keys
else:
    import _quad_keys

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Longitude(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quad_keys.Longitude_swiginit(self, _quad_keys.new_Longitude(*args))

    def val(self):
        return _quad_keys.Longitude_val(self)

    def near(self, *args):
        return _quad_keys.Longitude_near(self, *args)

    def __lt__(self, rhs):
        return _quad_keys.Longitude___lt__(self, rhs)

    def __le__(self, rhs):
        return _quad_keys.Longitude___le__(self, rhs)

    def __gt__(self, rhs):
        return _quad_keys.Longitude___gt__(self, rhs)

    def __ge__(self, rhs):
        return _quad_keys.Longitude___ge__(self, rhs)

    def __eq__(self, rhs):
        return _quad_keys.Longitude___eq__(self, rhs)

    def __ne__(self, rhs):
        return _quad_keys.Longitude___ne__(self, rhs)

    def __sub__(self, subtrahend):
        return _quad_keys.Longitude___sub__(self, subtrahend)
    __swig_destroy__ = _quad_keys.delete_Longitude

# Register Longitude in _quad_keys:
_quad_keys.Longitude_swigregister(Longitude)
cvar = _quad_keys.cvar
Longitude.min_longitude = _quad_keys.cvar.Longitude_min_longitude
Longitude.max_longitude = _quad_keys.cvar.Longitude_max_longitude

class Latitude(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quad_keys.Latitude_swiginit(self, _quad_keys.new_Latitude(*args))

    def val(self):
        return _quad_keys.Latitude_val(self)

    def near(self, *args):
        return _quad_keys.Latitude_near(self, *args)

    def __lt__(self, rhs):
        return _quad_keys.Latitude___lt__(self, rhs)

    def __le__(self, rhs):
        return _quad_keys.Latitude___le__(self, rhs)

    def __gt__(self, rhs):
        return _quad_keys.Latitude___gt__(self, rhs)

    def __ge__(self, rhs):
        return _quad_keys.Latitude___ge__(self, rhs)

    def __eq__(self, rhs):
        return _quad_keys.Latitude___eq__(self, rhs)

    def __ne__(self, rhs):
        return _quad_keys.Latitude___ne__(self, rhs)

    def __sub__(self, subtrahend):
        return _quad_keys.Latitude___sub__(self, subtrahend)
    __swig_destroy__ = _quad_keys.delete_Latitude

# Register Latitude in _quad_keys:
_quad_keys.Latitude_swigregister(Latitude)
Latitude.min_latitude = _quad_keys.cvar.Latitude_min_latitude
Latitude.max_latitude = _quad_keys.cvar.Latitude_max_latitude

class GeoCoordinate2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quad_keys.GeoCoordinate2d_swiginit(self, _quad_keys.new_GeoCoordinate2d(*args))

    def set_longitude(self, *args):
        return _quad_keys.GeoCoordinate2d_set_longitude(self, *args)

    def set_latitude(self, *args):
        return _quad_keys.GeoCoordinate2d_set_latitude(self, *args)

    def get_longitude(self):
        return _quad_keys.GeoCoordinate2d_get_longitude(self)

    def get_latitude(self):
        return _quad_keys.GeoCoordinate2d_get_latitude(self)

    def near(self, *args):
        return _quad_keys.GeoCoordinate2d_near(self, *args)

    def __eq__(self, rhs):
        return _quad_keys.GeoCoordinate2d___eq__(self, rhs)

    def __ne__(self, rhs):
        return _quad_keys.GeoCoordinate2d___ne__(self, rhs)
    __swig_destroy__ = _quad_keys.delete_GeoCoordinate2d

# Register GeoCoordinate2d in _quad_keys:
_quad_keys.GeoCoordinate2d_swigregister(GeoCoordinate2d)
class GeoCoordinateBoundingBox2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quad_keys.GeoCoordinateBoundingBox2d_swiginit(self, _quad_keys.new_GeoCoordinateBoundingBox2d(*args))

    def contains(self, coordinate):
        return _quad_keys.GeoCoordinateBoundingBox2d_contains(self, coordinate)

    def grow_to_contain(self, coordinate):
        return _quad_keys.GeoCoordinateBoundingBox2d_grow_to_contain(self, coordinate)

    def lower_left(self):
        return _quad_keys.GeoCoordinateBoundingBox2d_lower_left(self)

    def upper_right(self):
        return _quad_keys.GeoCoordinateBoundingBox2d_upper_right(self)

    def upper_left(self):
        return _quad_keys.GeoCoordinateBoundingBox2d_upper_left(self)

    def lower_right(self):
        return _quad_keys.GeoCoordinateBoundingBox2d_lower_right(self)

    def __eq__(self, rhs):
        return _quad_keys.GeoCoordinateBoundingBox2d___eq__(self, rhs)

    def is_valid(self):
        return _quad_keys.GeoCoordinateBoundingBox2d_is_valid(self)
    __swig_destroy__ = _quad_keys.delete_GeoCoordinateBoundingBox2d

# Register GeoCoordinateBoundingBox2d in _quad_keys:
_quad_keys.GeoCoordinateBoundingBox2d_swigregister(GeoCoordinateBoundingBox2d)
Type_Bing = _quad_keys.Type_Bing
Type_LatLon = _quad_keys.Type_LatLon
Type_Morton = _quad_keys.Type_Morton
Type__None = _quad_keys.Type__None
Type_OsGeo = _quad_keys.Type_OsGeo
Type_UlpQnr = _quad_keys.Type_UlpQnr

def type_to_string(t):
    return _quad_keys.type_to_string(t)
class QuadKey(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    quadrant_south_west = _quad_keys.QuadKey_quadrant_south_west
    quadrant_south_east = _quad_keys.QuadKey_quadrant_south_east
    quadrant_north_west = _quad_keys.QuadKey_quadrant_north_west
    quadrant_north_east = _quad_keys.QuadKey_quadrant_north_east

    def __init__(self, *args):
        _quad_keys.QuadKey_swiginit(self, _quad_keys.new_QuadKey(*args))

    def get_type(self):
        return _quad_keys.QuadKey_get_type(self)

    def type_as_string(self):
        return _quad_keys.QuadKey_type_as_string(self)

    def get_row(self):
        return _quad_keys.QuadKey_get_row(self)

    def get_col(self):
        return _quad_keys.QuadKey_get_col(self)

    def get_depth(self):
        return _quad_keys.QuadKey_get_depth(self)

    def is_root_key(self):
        return _quad_keys.QuadKey_is_root_key(self)

    def get_parent(self):
        return _quad_keys.QuadKey_get_parent(self)

    def is_my_ancestor(self, quad_key):
        return _quad_keys.QuadKey_is_my_ancestor(self, quad_key)

    def get_ancestor(self, depth_delta):
        return _quad_keys.QuadKey_get_ancestor(self, depth_delta)

    def get_child(self, quad_id):
        return _quad_keys.QuadKey_get_child(self, quad_id)

    def get_children(self):
        return _quad_keys.QuadKey_get_children(self)

    def get_descendants(self, depth_delta):
        return _quad_keys.QuadKey_get_descendants(self, depth_delta)

    def get_siblings(self):
        return _quad_keys.QuadKey_get_siblings(self)

    def get_neighbors(self):
        return _quad_keys.QuadKey_get_neighbors(self)

    def get_geo_coordinate_bounds2d(self, out_bounds):
        return _quad_keys.QuadKey_get_geo_coordinate_bounds2d(self, out_bounds)

    def to_internal_string(self):
        return _quad_keys.QuadKey_to_internal_string(self)

    @staticmethod
    def from_internal_string(t, in_string):
        return _quad_keys.QuadKey_from_internal_string(t, in_string)

    @staticmethod
    def get_key_from_longitude_latitude_at_depth(t, coords, depth):
        return _quad_keys.QuadKey_get_key_from_longitude_latitude_at_depth(t, coords, depth)

    @staticmethod
    def get_keys_from_longitude_latitude_bounding_box(t, bounds, depth):
        return _quad_keys.QuadKey_get_keys_from_longitude_latitude_bounding_box(t, bounds, depth)

    @staticmethod
    def max_depth(t):
        return _quad_keys.QuadKey_max_depth(t)

    @staticmethod
    def max_rows(t, depth):
        return _quad_keys.QuadKey_max_rows(t, depth)

    @staticmethod
    def max_cols(t, depth):
        return _quad_keys.QuadKey_max_cols(t, depth)

    @staticmethod
    def max_tiles(t, depth):
        return _quad_keys.QuadKey_max_tiles(t, depth)

    def __lt__(self, rhs):
        return _quad_keys.QuadKey___lt__(self, rhs)

    def __eq__(self, rhs):
        return _quad_keys.QuadKey___eq__(self, rhs)

    def __ne__(self, rhs):
        return _quad_keys.QuadKey___ne__(self, rhs)
    __swig_destroy__ = _quad_keys.delete_QuadKey

# Register QuadKey in _quad_keys:
_quad_keys.QuadKey_swigregister(QuadKey)
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quad_keys.delete_SwigPyIterator

    def value(self):
        return _quad_keys.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _quad_keys.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _quad_keys.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _quad_keys.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _quad_keys.SwigPyIterator_equal(self, x)

    def copy(self):
        return _quad_keys.SwigPyIterator_copy(self)

    def next(self):
        return _quad_keys.SwigPyIterator_next(self)

    def __next__(self):
        return _quad_keys.SwigPyIterator___next__(self)

    def previous(self):
        return _quad_keys.SwigPyIterator_previous(self)

    def advance(self, n):
        return _quad_keys.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _quad_keys.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _quad_keys.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _quad_keys.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _quad_keys.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _quad_keys.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _quad_keys.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _quad_keys:
_quad_keys.SwigPyIterator_swigregister(SwigPyIterator)
class QuadKeysVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _quad_keys.QuadKeysVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _quad_keys.QuadKeysVector___nonzero__(self)

    def __bool__(self):
        return _quad_keys.QuadKeysVector___bool__(self)

    def __len__(self):
        return _quad_keys.QuadKeysVector___len__(self)

    def __getslice__(self, i, j):
        return _quad_keys.QuadKeysVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _quad_keys.QuadKeysVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _quad_keys.QuadKeysVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _quad_keys.QuadKeysVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _quad_keys.QuadKeysVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _quad_keys.QuadKeysVector___setitem__(self, *args)

    def pop(self):
        return _quad_keys.QuadKeysVector_pop(self)

    def append(self, x):
        return _quad_keys.QuadKeysVector_append(self, x)

    def empty(self):
        return _quad_keys.QuadKeysVector_empty(self)

    def size(self):
        return _quad_keys.QuadKeysVector_size(self)

    def swap(self, v):
        return _quad_keys.QuadKeysVector_swap(self, v)

    def begin(self):
        return _quad_keys.QuadKeysVector_begin(self)

    def end(self):
        return _quad_keys.QuadKeysVector_end(self)

    def rbegin(self):
        return _quad_keys.QuadKeysVector_rbegin(self)

    def rend(self):
        return _quad_keys.QuadKeysVector_rend(self)

    def clear(self):
        return _quad_keys.QuadKeysVector_clear(self)

    def get_allocator(self):
        return _quad_keys.QuadKeysVector_get_allocator(self)

    def pop_back(self):
        return _quad_keys.QuadKeysVector_pop_back(self)

    def erase(self, *args):
        return _quad_keys.QuadKeysVector_erase(self, *args)

    def __init__(self, *args):
        _quad_keys.QuadKeysVector_swiginit(self, _quad_keys.new_QuadKeysVector(*args))

    def push_back(self, x):
        return _quad_keys.QuadKeysVector_push_back(self, x)

    def front(self):
        return _quad_keys.QuadKeysVector_front(self)

    def back(self):
        return _quad_keys.QuadKeysVector_back(self)

    def assign(self, n, x):
        return _quad_keys.QuadKeysVector_assign(self, n, x)

    def resize(self, *args):
        return _quad_keys.QuadKeysVector_resize(self, *args)

    def insert(self, *args):
        return _quad_keys.QuadKeysVector_insert(self, *args)

    def reserve(self, n):
        return _quad_keys.QuadKeysVector_reserve(self, n)

    def capacity(self):
        return _quad_keys.QuadKeysVector_capacity(self)
    __swig_destroy__ = _quad_keys.delete_QuadKeysVector

# Register QuadKeysVector in _quad_keys:
_quad_keys.QuadKeysVector_swigregister(QuadKeysVector)

