/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "QuadKey/QuadKey.h"


#include <stdint.h>		// Use the C99 official header


#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< QuadKeys::QuadKey >::const_reference std_vector_Sl_QuadKeys_QuadKey_Sg__get(std::vector< QuadKeys::QuadKey > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_QuadKeys_QuadKey_Sg__set(std::vector< QuadKeys::QuadKey > *self,int i,std::vector< QuadKeys::QuadKey >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jdouble JNICALL Java_com_quadkey_SwigQuadKeyJNI_Longitude_1minLongitude_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)QuadKeys::Longitude::minLongitude;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_quadkey_SwigQuadKeyJNI_Longitude_1maxLongitude_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)QuadKeys::Longitude::maxLongitude;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_new_1Longitude_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  QuadKeys::Longitude *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (QuadKeys::Longitude *)new QuadKeys::Longitude(arg1);
  *(QuadKeys::Longitude **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_new_1Longitude_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QuadKeys::Longitude *arg1 = 0 ;
  QuadKeys::Longitude *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::Longitude **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Longitude const & reference is null");
    return 0;
  } 
  result = (QuadKeys::Longitude *)new QuadKeys::Longitude((QuadKeys::Longitude const &)*arg1);
  *(QuadKeys::Longitude **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_Longitude_1assignLongitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  QuadKeys::Longitude *arg1 = (QuadKeys::Longitude *) 0 ;
  QuadKeys::Longitude *arg2 = 0 ;
  QuadKeys::Longitude *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::Longitude **)&jarg1; 
  arg2 = *(QuadKeys::Longitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Longitude const & reference is null");
    return 0;
  } 
  result = (QuadKeys::Longitude *) &(arg1)->operator =((QuadKeys::Longitude const &)*arg2);
  *(QuadKeys::Longitude **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_quadkey_SwigQuadKeyJNI_Longitude_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  QuadKeys::Longitude *arg1 = (QuadKeys::Longitude *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::Longitude **)&jarg1; 
  result = (double)((QuadKeys::Longitude const *)arg1)->val();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_Longitude_1near_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ;
  QuadKeys::Longitude *arg1 = (QuadKeys::Longitude *) 0 ;
  QuadKeys::Longitude *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::Longitude **)&jarg1; 
  arg2 = *(QuadKeys::Longitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Longitude const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)((QuadKeys::Longitude const *)arg1)->near((QuadKeys::Longitude const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_Longitude_1near_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QuadKeys::Longitude *arg1 = (QuadKeys::Longitude *) 0 ;
  QuadKeys::Longitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::Longitude **)&jarg1; 
  arg2 = *(QuadKeys::Longitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Longitude const & reference is null");
    return 0;
  } 
  result = (bool)((QuadKeys::Longitude const *)arg1)->near((QuadKeys::Longitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_Longitude_1lessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QuadKeys::Longitude *arg1 = (QuadKeys::Longitude *) 0 ;
  QuadKeys::Longitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::Longitude **)&jarg1; 
  arg2 = *(QuadKeys::Longitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Longitude const & reference is null");
    return 0;
  } 
  result = (bool)((QuadKeys::Longitude const *)arg1)->operator <((QuadKeys::Longitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_Longitude_1lessThanOrEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QuadKeys::Longitude *arg1 = (QuadKeys::Longitude *) 0 ;
  QuadKeys::Longitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::Longitude **)&jarg1; 
  arg2 = *(QuadKeys::Longitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Longitude const & reference is null");
    return 0;
  } 
  result = (bool)((QuadKeys::Longitude const *)arg1)->operator <=((QuadKeys::Longitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_Longitude_1greaterThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QuadKeys::Longitude *arg1 = (QuadKeys::Longitude *) 0 ;
  QuadKeys::Longitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::Longitude **)&jarg1; 
  arg2 = *(QuadKeys::Longitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Longitude const & reference is null");
    return 0;
  } 
  result = (bool)((QuadKeys::Longitude const *)arg1)->operator >((QuadKeys::Longitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_Longitude_1greaterThanOrEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QuadKeys::Longitude *arg1 = (QuadKeys::Longitude *) 0 ;
  QuadKeys::Longitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::Longitude **)&jarg1; 
  arg2 = *(QuadKeys::Longitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Longitude const & reference is null");
    return 0;
  } 
  result = (bool)((QuadKeys::Longitude const *)arg1)->operator >=((QuadKeys::Longitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_Longitude_1equalTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QuadKeys::Longitude *arg1 = (QuadKeys::Longitude *) 0 ;
  QuadKeys::Longitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::Longitude **)&jarg1; 
  arg2 = *(QuadKeys::Longitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Longitude const & reference is null");
    return 0;
  } 
  result = (bool)((QuadKeys::Longitude const *)arg1)->operator ==((QuadKeys::Longitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_Longitude_1notEqualTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QuadKeys::Longitude *arg1 = (QuadKeys::Longitude *) 0 ;
  QuadKeys::Longitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::Longitude **)&jarg1; 
  arg2 = *(QuadKeys::Longitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Longitude const & reference is null");
    return 0;
  } 
  result = (bool)((QuadKeys::Longitude const *)arg1)->operator !=((QuadKeys::Longitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_quadkey_SwigQuadKeyJNI_Longitude_1longitudeDifference(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  QuadKeys::Longitude *arg1 = (QuadKeys::Longitude *) 0 ;
  QuadKeys::Longitude *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::Longitude **)&jarg1; 
  arg2 = *(QuadKeys::Longitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Longitude const & reference is null");
    return 0;
  } 
  result = (double)((QuadKeys::Longitude const *)arg1)->operator -((QuadKeys::Longitude const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_quadkey_SwigQuadKeyJNI_delete_1Longitude(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  QuadKeys::Longitude *arg1 = (QuadKeys::Longitude *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QuadKeys::Longitude **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_com_quadkey_SwigQuadKeyJNI_Latitude_1minLatitude_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)QuadKeys::Latitude::minLatitude;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_quadkey_SwigQuadKeyJNI_Latitude_1maxLatitude_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)QuadKeys::Latitude::maxLatitude;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_new_1Latitude_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  QuadKeys::Latitude *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (QuadKeys::Latitude *)new QuadKeys::Latitude(arg1);
  *(QuadKeys::Latitude **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_new_1Latitude_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QuadKeys::Latitude *arg1 = 0 ;
  QuadKeys::Latitude *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::Latitude **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Latitude const & reference is null");
    return 0;
  } 
  result = (QuadKeys::Latitude *)new QuadKeys::Latitude((QuadKeys::Latitude const &)*arg1);
  *(QuadKeys::Latitude **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_Latitude_1assignLatitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  QuadKeys::Latitude *arg1 = (QuadKeys::Latitude *) 0 ;
  QuadKeys::Latitude *arg2 = 0 ;
  QuadKeys::Latitude *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::Latitude **)&jarg1; 
  arg2 = *(QuadKeys::Latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Latitude const & reference is null");
    return 0;
  } 
  result = (QuadKeys::Latitude *) &(arg1)->operator =((QuadKeys::Latitude const &)*arg2);
  *(QuadKeys::Latitude **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_quadkey_SwigQuadKeyJNI_Latitude_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  QuadKeys::Latitude *arg1 = (QuadKeys::Latitude *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::Latitude **)&jarg1; 
  result = (double)((QuadKeys::Latitude const *)arg1)->val();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_Latitude_1near_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ;
  QuadKeys::Latitude *arg1 = (QuadKeys::Latitude *) 0 ;
  QuadKeys::Latitude *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::Latitude **)&jarg1; 
  arg2 = *(QuadKeys::Latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Latitude const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)((QuadKeys::Latitude const *)arg1)->near((QuadKeys::Latitude const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_Latitude_1near_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QuadKeys::Latitude *arg1 = (QuadKeys::Latitude *) 0 ;
  QuadKeys::Latitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::Latitude **)&jarg1; 
  arg2 = *(QuadKeys::Latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Latitude const & reference is null");
    return 0;
  } 
  result = (bool)((QuadKeys::Latitude const *)arg1)->near((QuadKeys::Latitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_Latitude_1lessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QuadKeys::Latitude *arg1 = (QuadKeys::Latitude *) 0 ;
  QuadKeys::Latitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::Latitude **)&jarg1; 
  arg2 = *(QuadKeys::Latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Latitude const & reference is null");
    return 0;
  } 
  result = (bool)((QuadKeys::Latitude const *)arg1)->operator <((QuadKeys::Latitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_Latitude_1lessThanOrEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QuadKeys::Latitude *arg1 = (QuadKeys::Latitude *) 0 ;
  QuadKeys::Latitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::Latitude **)&jarg1; 
  arg2 = *(QuadKeys::Latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Latitude const & reference is null");
    return 0;
  } 
  result = (bool)((QuadKeys::Latitude const *)arg1)->operator <=((QuadKeys::Latitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_Latitude_1greaterThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QuadKeys::Latitude *arg1 = (QuadKeys::Latitude *) 0 ;
  QuadKeys::Latitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::Latitude **)&jarg1; 
  arg2 = *(QuadKeys::Latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Latitude const & reference is null");
    return 0;
  } 
  result = (bool)((QuadKeys::Latitude const *)arg1)->operator >((QuadKeys::Latitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_Latitude_1greaterThanOrEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QuadKeys::Latitude *arg1 = (QuadKeys::Latitude *) 0 ;
  QuadKeys::Latitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::Latitude **)&jarg1; 
  arg2 = *(QuadKeys::Latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Latitude const & reference is null");
    return 0;
  } 
  result = (bool)((QuadKeys::Latitude const *)arg1)->operator >=((QuadKeys::Latitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_Latitude_1equalTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QuadKeys::Latitude *arg1 = (QuadKeys::Latitude *) 0 ;
  QuadKeys::Latitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::Latitude **)&jarg1; 
  arg2 = *(QuadKeys::Latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Latitude const & reference is null");
    return 0;
  } 
  result = (bool)((QuadKeys::Latitude const *)arg1)->operator ==((QuadKeys::Latitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_Latitude_1notEqualTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QuadKeys::Latitude *arg1 = (QuadKeys::Latitude *) 0 ;
  QuadKeys::Latitude *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::Latitude **)&jarg1; 
  arg2 = *(QuadKeys::Latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Latitude const & reference is null");
    return 0;
  } 
  result = (bool)((QuadKeys::Latitude const *)arg1)->operator !=((QuadKeys::Latitude const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_quadkey_SwigQuadKeyJNI_Latitude_1latitudeDifference(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  QuadKeys::Latitude *arg1 = (QuadKeys::Latitude *) 0 ;
  QuadKeys::Latitude *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::Latitude **)&jarg1; 
  arg2 = *(QuadKeys::Latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Latitude const & reference is null");
    return 0;
  } 
  result = (double)((QuadKeys::Latitude const *)arg1)->operator -((QuadKeys::Latitude const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_quadkey_SwigQuadKeyJNI_delete_1Latitude(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  QuadKeys::Latitude *arg1 = (QuadKeys::Latitude *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QuadKeys::Latitude **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_new_1GeoCoordinate2d_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  QuadKeys::GeoCoordinate2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (QuadKeys::GeoCoordinate2d *)new QuadKeys::GeoCoordinate2d();
  *(QuadKeys::GeoCoordinate2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_new_1GeoCoordinate2d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  QuadKeys::Longitude *arg1 = 0 ;
  QuadKeys::Latitude *arg2 = 0 ;
  QuadKeys::GeoCoordinate2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::Longitude **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Longitude const & reference is null");
    return 0;
  } 
  arg2 = *(QuadKeys::Latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Latitude const & reference is null");
    return 0;
  } 
  result = (QuadKeys::GeoCoordinate2d *)new QuadKeys::GeoCoordinate2d((QuadKeys::Longitude const &)*arg1,(QuadKeys::Latitude const &)*arg2);
  *(QuadKeys::GeoCoordinate2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_new_1GeoCoordinate2d_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QuadKeys::GeoCoordinate2d *arg1 = 0 ;
  QuadKeys::GeoCoordinate2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::GeoCoordinate2d **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::GeoCoordinate2d const & reference is null");
    return 0;
  } 
  result = (QuadKeys::GeoCoordinate2d *)new QuadKeys::GeoCoordinate2d((QuadKeys::GeoCoordinate2d const &)*arg1);
  *(QuadKeys::GeoCoordinate2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_GeoCoordinate2d_1assignGeoCoordinate2d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  QuadKeys::GeoCoordinate2d *arg1 = (QuadKeys::GeoCoordinate2d *) 0 ;
  QuadKeys::GeoCoordinate2d *arg2 = 0 ;
  QuadKeys::GeoCoordinate2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::GeoCoordinate2d **)&jarg1; 
  arg2 = *(QuadKeys::GeoCoordinate2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::GeoCoordinate2d const & reference is null");
    return 0;
  } 
  result = (QuadKeys::GeoCoordinate2d *) &(arg1)->operator =((QuadKeys::GeoCoordinate2d const &)*arg2);
  *(QuadKeys::GeoCoordinate2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_quadkey_SwigQuadKeyJNI_GeoCoordinate2d_1longitude_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  QuadKeys::GeoCoordinate2d *arg1 = (QuadKeys::GeoCoordinate2d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::GeoCoordinate2d **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->longitude(arg2);
}


SWIGEXPORT void JNICALL Java_com_quadkey_SwigQuadKeyJNI_GeoCoordinate2d_1latitude_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  QuadKeys::GeoCoordinate2d *arg1 = (QuadKeys::GeoCoordinate2d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::GeoCoordinate2d **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->latitude(arg2);
}


SWIGEXPORT void JNICALL Java_com_quadkey_SwigQuadKeyJNI_GeoCoordinate2d_1longitude_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  QuadKeys::GeoCoordinate2d *arg1 = (QuadKeys::GeoCoordinate2d *) 0 ;
  QuadKeys::Longitude *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::GeoCoordinate2d **)&jarg1; 
  arg2 = *(QuadKeys::Longitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Longitude const & reference is null");
    return ;
  } 
  (arg1)->longitude((QuadKeys::Longitude const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_quadkey_SwigQuadKeyJNI_GeoCoordinate2d_1latitude_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  QuadKeys::GeoCoordinate2d *arg1 = (QuadKeys::GeoCoordinate2d *) 0 ;
  QuadKeys::Latitude *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::GeoCoordinate2d **)&jarg1; 
  arg2 = *(QuadKeys::Latitude **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::Latitude const & reference is null");
    return ;
  } 
  (arg1)->latitude((QuadKeys::Latitude const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_GeoCoordinate2d_1longitude_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QuadKeys::GeoCoordinate2d *arg1 = (QuadKeys::GeoCoordinate2d *) 0 ;
  QuadKeys::Longitude *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::GeoCoordinate2d **)&jarg1; 
  result = (QuadKeys::Longitude *) &((QuadKeys::GeoCoordinate2d const *)arg1)->longitude();
  *(QuadKeys::Longitude **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_GeoCoordinate2d_1latitude_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QuadKeys::GeoCoordinate2d *arg1 = (QuadKeys::GeoCoordinate2d *) 0 ;
  QuadKeys::Latitude *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::GeoCoordinate2d **)&jarg1; 
  result = (QuadKeys::Latitude *) &((QuadKeys::GeoCoordinate2d const *)arg1)->latitude();
  *(QuadKeys::Latitude **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_GeoCoordinate2d_1near_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ;
  QuadKeys::GeoCoordinate2d *arg1 = (QuadKeys::GeoCoordinate2d *) 0 ;
  QuadKeys::GeoCoordinate2d *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::GeoCoordinate2d **)&jarg1; 
  arg2 = *(QuadKeys::GeoCoordinate2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::GeoCoordinate2d const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)((QuadKeys::GeoCoordinate2d const *)arg1)->near((QuadKeys::GeoCoordinate2d const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_GeoCoordinate2d_1near_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QuadKeys::GeoCoordinate2d *arg1 = (QuadKeys::GeoCoordinate2d *) 0 ;
  QuadKeys::GeoCoordinate2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::GeoCoordinate2d **)&jarg1; 
  arg2 = *(QuadKeys::GeoCoordinate2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::GeoCoordinate2d const & reference is null");
    return 0;
  } 
  result = (bool)((QuadKeys::GeoCoordinate2d const *)arg1)->near((QuadKeys::GeoCoordinate2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_GeoCoordinate2d_1equalTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QuadKeys::GeoCoordinate2d *arg1 = (QuadKeys::GeoCoordinate2d *) 0 ;
  QuadKeys::GeoCoordinate2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::GeoCoordinate2d **)&jarg1; 
  arg2 = *(QuadKeys::GeoCoordinate2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::GeoCoordinate2d const & reference is null");
    return 0;
  } 
  result = (bool)((QuadKeys::GeoCoordinate2d const *)arg1)->operator ==((QuadKeys::GeoCoordinate2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_GeoCoordinate2d_1notEqualTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QuadKeys::GeoCoordinate2d *arg1 = (QuadKeys::GeoCoordinate2d *) 0 ;
  QuadKeys::GeoCoordinate2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::GeoCoordinate2d **)&jarg1; 
  arg2 = *(QuadKeys::GeoCoordinate2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::GeoCoordinate2d const & reference is null");
    return 0;
  } 
  result = (bool)((QuadKeys::GeoCoordinate2d const *)arg1)->operator !=((QuadKeys::GeoCoordinate2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_quadkey_SwigQuadKeyJNI_delete_1GeoCoordinate2d(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  QuadKeys::GeoCoordinate2d *arg1 = (QuadKeys::GeoCoordinate2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QuadKeys::GeoCoordinate2d **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_new_1GeoCoordinateBoundingBox2d_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  QuadKeys::GeoCoordinateBoundingBox2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (QuadKeys::GeoCoordinateBoundingBox2d *)new QuadKeys::GeoCoordinateBoundingBox2d();
  *(QuadKeys::GeoCoordinateBoundingBox2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_new_1GeoCoordinateBoundingBox2d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  QuadKeys::GeoCoordinate2d *arg1 = 0 ;
  QuadKeys::GeoCoordinate2d *arg2 = 0 ;
  QuadKeys::GeoCoordinateBoundingBox2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::GeoCoordinate2d **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::GeoCoordinate2d const & reference is null");
    return 0;
  } 
  arg2 = *(QuadKeys::GeoCoordinate2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::GeoCoordinate2d const & reference is null");
    return 0;
  } 
  result = (QuadKeys::GeoCoordinateBoundingBox2d *)new QuadKeys::GeoCoordinateBoundingBox2d((QuadKeys::GeoCoordinate2d const &)*arg1,(QuadKeys::GeoCoordinate2d const &)*arg2);
  *(QuadKeys::GeoCoordinateBoundingBox2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_GeoCoordinateBoundingBox2d_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QuadKeys::GeoCoordinateBoundingBox2d *arg1 = (QuadKeys::GeoCoordinateBoundingBox2d *) 0 ;
  QuadKeys::GeoCoordinate2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::GeoCoordinateBoundingBox2d **)&jarg1; 
  arg2 = *(QuadKeys::GeoCoordinate2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::GeoCoordinate2d const & reference is null");
    return 0;
  } 
  result = (bool)((QuadKeys::GeoCoordinateBoundingBox2d const *)arg1)->contains((QuadKeys::GeoCoordinate2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_quadkey_SwigQuadKeyJNI_GeoCoordinateBoundingBox2d_1growToContain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  QuadKeys::GeoCoordinateBoundingBox2d *arg1 = (QuadKeys::GeoCoordinateBoundingBox2d *) 0 ;
  QuadKeys::GeoCoordinate2d *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::GeoCoordinateBoundingBox2d **)&jarg1; 
  arg2 = *(QuadKeys::GeoCoordinate2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::GeoCoordinate2d const & reference is null");
    return ;
  } 
  (arg1)->growToContain((QuadKeys::GeoCoordinate2d const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_GeoCoordinateBoundingBox2d_1lowerLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QuadKeys::GeoCoordinateBoundingBox2d *arg1 = (QuadKeys::GeoCoordinateBoundingBox2d *) 0 ;
  QuadKeys::GeoCoordinate2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::GeoCoordinateBoundingBox2d **)&jarg1; 
  result = (QuadKeys::GeoCoordinate2d *) &((QuadKeys::GeoCoordinateBoundingBox2d const *)arg1)->lowerLeft();
  *(QuadKeys::GeoCoordinate2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_GeoCoordinateBoundingBox2d_1upperRight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QuadKeys::GeoCoordinateBoundingBox2d *arg1 = (QuadKeys::GeoCoordinateBoundingBox2d *) 0 ;
  QuadKeys::GeoCoordinate2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::GeoCoordinateBoundingBox2d **)&jarg1; 
  result = (QuadKeys::GeoCoordinate2d *) &((QuadKeys::GeoCoordinateBoundingBox2d const *)arg1)->upperRight();
  *(QuadKeys::GeoCoordinate2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_GeoCoordinateBoundingBox2d_1upperLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QuadKeys::GeoCoordinateBoundingBox2d *arg1 = (QuadKeys::GeoCoordinateBoundingBox2d *) 0 ;
  QuadKeys::GeoCoordinate2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::GeoCoordinateBoundingBox2d **)&jarg1; 
  result = ((QuadKeys::GeoCoordinateBoundingBox2d const *)arg1)->upperLeft();
  *(QuadKeys::GeoCoordinate2d **)&jresult = new QuadKeys::GeoCoordinate2d((const QuadKeys::GeoCoordinate2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_GeoCoordinateBoundingBox2d_1lowerRight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QuadKeys::GeoCoordinateBoundingBox2d *arg1 = (QuadKeys::GeoCoordinateBoundingBox2d *) 0 ;
  QuadKeys::GeoCoordinate2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::GeoCoordinateBoundingBox2d **)&jarg1; 
  result = ((QuadKeys::GeoCoordinateBoundingBox2d const *)arg1)->lowerRight();
  *(QuadKeys::GeoCoordinate2d **)&jresult = new QuadKeys::GeoCoordinate2d((const QuadKeys::GeoCoordinate2d &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_GeoCoordinateBoundingBox2d_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  QuadKeys::GeoCoordinateBoundingBox2d *arg1 = (QuadKeys::GeoCoordinateBoundingBox2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::GeoCoordinateBoundingBox2d **)&jarg1; 
  result = (bool)((QuadKeys::GeoCoordinateBoundingBox2d const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_quadkey_SwigQuadKeyJNI_delete_1GeoCoordinateBoundingBox2d(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  QuadKeys::GeoCoordinateBoundingBox2d *arg1 = (QuadKeys::GeoCoordinateBoundingBox2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QuadKeys::GeoCoordinateBoundingBox2d **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_quadkey_SwigQuadKeyJNI_typeToString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  QuadKeys::Type arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (QuadKeys::Type)jarg1; 
  result = QuadKeys::typeToString(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1Quadrant_1SouthWest_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QuadKeys::QuadKey::Quadrant result;
  
  (void)jenv;
  (void)jcls;
  result = (QuadKeys::QuadKey::Quadrant)QuadKeys::QuadKey::Quadrant::SouthWest;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1Quadrant_1SouthEast_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QuadKeys::QuadKey::Quadrant result;
  
  (void)jenv;
  (void)jcls;
  result = (QuadKeys::QuadKey::Quadrant)QuadKeys::QuadKey::Quadrant::SouthEast;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1Quadrant_1NorthWest_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QuadKeys::QuadKey::Quadrant result;
  
  (void)jenv;
  (void)jcls;
  result = (QuadKeys::QuadKey::Quadrant)QuadKeys::QuadKey::Quadrant::NorthWest;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1Quadrant_1NorthEast_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  QuadKeys::QuadKey::Quadrant result;
  
  (void)jenv;
  (void)jcls;
  result = (QuadKeys::QuadKey::Quadrant)QuadKeys::QuadKey::Quadrant::NorthEast;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_new_1QuadKey_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  QuadKeys::QuadKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (QuadKeys::QuadKey *)new QuadKeys::QuadKey();
  *(QuadKeys::QuadKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_new_1QuadKey_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  QuadKeys::Type arg1 ;
  QuadKeys::QuadKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (QuadKeys::Type)jarg1; 
  result = (QuadKeys::QuadKey *)new QuadKeys::QuadKey(arg1);
  *(QuadKeys::QuadKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_new_1QuadKey_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3, jshort jarg4) {
  jlong jresult = 0 ;
  QuadKeys::Type arg1 ;
  std::uint32_t arg2 ;
  std::uint32_t arg3 ;
  std::uint8_t arg4 ;
  QuadKeys::QuadKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (QuadKeys::Type)jarg1; 
  arg2 = (std::uint32_t)jarg2; 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (std::uint8_t)jarg4; 
  result = (QuadKeys::QuadKey *)new QuadKeys::QuadKey(arg1,arg2,arg3,arg4);
  *(QuadKeys::QuadKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_new_1QuadKey_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QuadKeys::QuadKey *arg1 = 0 ;
  QuadKeys::QuadKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::QuadKey **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::QuadKey const & reference is null");
    return 0;
  } 
  result = (QuadKeys::QuadKey *)new QuadKeys::QuadKey((QuadKeys::QuadKey const &)*arg1);
  *(QuadKeys::QuadKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1assignQuadKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  QuadKeys::QuadKey *arg1 = (QuadKeys::QuadKey *) 0 ;
  QuadKeys::QuadKey *arg2 = 0 ;
  QuadKeys::QuadKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::QuadKey **)&jarg1; 
  arg2 = *(QuadKeys::QuadKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::QuadKey const & reference is null");
    return 0;
  } 
  result = (QuadKeys::QuadKey *) &(arg1)->operator =((QuadKeys::QuadKey const &)*arg2);
  *(QuadKeys::QuadKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  QuadKeys::QuadKey *arg1 = (QuadKeys::QuadKey *) 0 ;
  QuadKeys::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::QuadKey **)&jarg1; 
  result = (QuadKeys::Type)((QuadKeys::QuadKey const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1typeAsString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  QuadKeys::QuadKey *arg1 = (QuadKeys::QuadKey *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::QuadKey **)&jarg1; 
  result = ((QuadKeys::QuadKey const *)arg1)->typeAsString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1getRow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QuadKeys::QuadKey *arg1 = (QuadKeys::QuadKey *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::QuadKey **)&jarg1; 
  result = (std::uint32_t)((QuadKeys::QuadKey const *)arg1)->getRow();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1getCol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QuadKeys::QuadKey *arg1 = (QuadKeys::QuadKey *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::QuadKey **)&jarg1; 
  result = (std::uint32_t)((QuadKeys::QuadKey const *)arg1)->getCol();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1getDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  QuadKeys::QuadKey *arg1 = (QuadKeys::QuadKey *) 0 ;
  std::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::QuadKey **)&jarg1; 
  result = (std::uint8_t)((QuadKeys::QuadKey const *)arg1)->getDepth();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1isRootKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  QuadKeys::QuadKey *arg1 = (QuadKeys::QuadKey *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::QuadKey **)&jarg1; 
  result = (bool)((QuadKeys::QuadKey const *)arg1)->isRootKey();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1getParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QuadKeys::QuadKey *arg1 = (QuadKeys::QuadKey *) 0 ;
  QuadKeys::QuadKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::QuadKey **)&jarg1; 
  result = ((QuadKeys::QuadKey const *)arg1)->getParent();
  *(QuadKeys::QuadKey **)&jresult = new QuadKeys::QuadKey((const QuadKeys::QuadKey &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1isMyAncestor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QuadKeys::QuadKey *arg1 = (QuadKeys::QuadKey *) 0 ;
  QuadKeys::QuadKey *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::QuadKey **)&jarg1; 
  arg2 = *(QuadKeys::QuadKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::QuadKey const & reference is null");
    return 0;
  } 
  result = (bool)((QuadKeys::QuadKey const *)arg1)->isMyAncestor((QuadKeys::QuadKey const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1getAncestor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  QuadKeys::QuadKey *arg1 = (QuadKeys::QuadKey *) 0 ;
  std::uint8_t arg2 ;
  QuadKeys::QuadKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::QuadKey **)&jarg1; 
  arg2 = (std::uint8_t)jarg2; 
  result = ((QuadKeys::QuadKey const *)arg1)->getAncestor(arg2);
  *(QuadKeys::QuadKey **)&jresult = new QuadKeys::QuadKey((const QuadKeys::QuadKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1getChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  QuadKeys::QuadKey *arg1 = (QuadKeys::QuadKey *) 0 ;
  QuadKeys::QuadKey::Quadrant arg2 ;
  QuadKeys::QuadKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::QuadKey **)&jarg1; 
  arg2 = (QuadKeys::QuadKey::Quadrant)jarg2; 
  result = ((QuadKeys::QuadKey const *)arg1)->getChild(arg2);
  *(QuadKeys::QuadKey **)&jresult = new QuadKeys::QuadKey((const QuadKeys::QuadKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1getChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QuadKeys::QuadKey *arg1 = (QuadKeys::QuadKey *) 0 ;
  std::vector< QuadKeys::QuadKey > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::QuadKey **)&jarg1; 
  result = ((QuadKeys::QuadKey const *)arg1)->getChildren();
  *(std::vector< QuadKeys::QuadKey > **)&jresult = new std::vector< QuadKeys::QuadKey >((const std::vector< QuadKeys::QuadKey > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1getDescendants(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  QuadKeys::QuadKey *arg1 = (QuadKeys::QuadKey *) 0 ;
  std::uint8_t arg2 ;
  std::vector< QuadKeys::QuadKey > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::QuadKey **)&jarg1; 
  arg2 = (std::uint8_t)jarg2; 
  result = ((QuadKeys::QuadKey const *)arg1)->getDescendants(arg2);
  *(std::vector< QuadKeys::QuadKey > **)&jresult = new std::vector< QuadKeys::QuadKey >((const std::vector< QuadKeys::QuadKey > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1getSiblings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QuadKeys::QuadKey *arg1 = (QuadKeys::QuadKey *) 0 ;
  std::vector< QuadKeys::QuadKey > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::QuadKey **)&jarg1; 
  result = ((QuadKeys::QuadKey const *)arg1)->getSiblings();
  *(std::vector< QuadKeys::QuadKey > **)&jresult = new std::vector< QuadKeys::QuadKey >((const std::vector< QuadKeys::QuadKey > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1getNeighbors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QuadKeys::QuadKey *arg1 = (QuadKeys::QuadKey *) 0 ;
  std::vector< QuadKeys::QuadKey > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::QuadKey **)&jarg1; 
  result = ((QuadKeys::QuadKey const *)arg1)->getNeighbors();
  *(std::vector< QuadKeys::QuadKey > **)&jresult = new std::vector< QuadKeys::QuadKey >((const std::vector< QuadKeys::QuadKey > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1getGeoCoordinateBounds2d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  QuadKeys::QuadKey *arg1 = (QuadKeys::QuadKey *) 0 ;
  QuadKeys::GeoCoordinateBoundingBox2d *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::QuadKey **)&jarg1; 
  arg2 = *(QuadKeys::GeoCoordinateBoundingBox2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::GeoCoordinateBoundingBox2d & reference is null");
    return ;
  } 
  ((QuadKeys::QuadKey const *)arg1)->getGeoCoordinateBounds2d(*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1toInternalString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  QuadKeys::QuadKey *arg1 = (QuadKeys::QuadKey *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QuadKeys::QuadKey **)&jarg1; 
  result = ((QuadKeys::QuadKey const *)arg1)->toInternalString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1fromInternalString(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  QuadKeys::Type arg1 ;
  std::string *arg2 = 0 ;
  QuadKeys::QuadKey result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (QuadKeys::Type)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = QuadKeys::QuadKey::fromInternalString(arg1,(std::string const &)*arg2);
  *(QuadKeys::QuadKey **)&jresult = new QuadKeys::QuadKey((const QuadKeys::QuadKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1getKeyFromLongitudeLatitudeAtDepth(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jshort jarg3) {
  jlong jresult = 0 ;
  QuadKeys::Type arg1 ;
  QuadKeys::GeoCoordinate2d *arg2 = 0 ;
  std::uint8_t arg3 ;
  QuadKeys::QuadKey result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (QuadKeys::Type)jarg1; 
  arg2 = *(QuadKeys::GeoCoordinate2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::GeoCoordinate2d const & reference is null");
    return 0;
  } 
  arg3 = (std::uint8_t)jarg3; 
  result = QuadKeys::QuadKey::getKeyFromLongitudeLatitudeAtDepth(arg1,(QuadKeys::GeoCoordinate2d const &)*arg2,arg3);
  *(QuadKeys::QuadKey **)&jresult = new QuadKeys::QuadKey((const QuadKeys::QuadKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1getKeysFromLongitudeLatitudeBoundingBox(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jshort jarg3) {
  jlong jresult = 0 ;
  QuadKeys::Type arg1 ;
  QuadKeys::GeoCoordinateBoundingBox2d *arg2 = 0 ;
  std::uint8_t arg3 ;
  std::vector< QuadKeys::QuadKey > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (QuadKeys::Type)jarg1; 
  arg2 = *(QuadKeys::GeoCoordinateBoundingBox2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::GeoCoordinateBoundingBox2d const & reference is null");
    return 0;
  } 
  arg3 = (std::uint8_t)jarg3; 
  result = QuadKeys::QuadKey::getKeysFromLongitudeLatitudeBoundingBox(arg1,(QuadKeys::GeoCoordinateBoundingBox2d const &)*arg2,arg3);
  *(std::vector< QuadKeys::QuadKey > **)&jresult = new std::vector< QuadKeys::QuadKey >((const std::vector< QuadKeys::QuadKey > &)result); 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1maxDepth(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jshort jresult = 0 ;
  QuadKeys::Type arg1 ;
  std::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (QuadKeys::Type)jarg1; 
  result = (std::uint8_t)QuadKeys::QuadKey::maxDepth(arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1maxRows(JNIEnv *jenv, jclass jcls, jint jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  QuadKeys::Type arg1 ;
  std::uint8_t arg2 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (QuadKeys::Type)jarg1; 
  arg2 = (std::uint8_t)jarg2; 
  result = (std::uint32_t)QuadKeys::QuadKey::maxRows(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1maxCols(JNIEnv *jenv, jclass jcls, jint jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  QuadKeys::Type arg1 ;
  std::uint8_t arg2 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (QuadKeys::Type)jarg1; 
  arg2 = (std::uint8_t)jarg2; 
  result = (std::uint32_t)QuadKeys::QuadKey::maxCols(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1maxTiles(JNIEnv *jenv, jclass jcls, jint jarg1, jshort jarg2) {
  jobject jresult = 0 ;
  QuadKeys::Type arg1 ;
  std::uint8_t arg2 ;
  std::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (QuadKeys::Type)jarg1; 
  arg2 = (std::uint8_t)jarg2; 
  result = (std::uint64_t)QuadKeys::QuadKey::maxTiles(arg1,arg2);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1lessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QuadKeys::QuadKey *arg1 = (QuadKeys::QuadKey *) 0 ;
  QuadKeys::QuadKey *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::QuadKey **)&jarg1; 
  arg2 = *(QuadKeys::QuadKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::QuadKey const & reference is null");
    return 0;
  } 
  result = (bool)((QuadKeys::QuadKey const *)arg1)->operator <((QuadKeys::QuadKey const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1equalTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QuadKeys::QuadKey *arg1 = (QuadKeys::QuadKey *) 0 ;
  QuadKeys::QuadKey *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::QuadKey **)&jarg1; 
  arg2 = *(QuadKeys::QuadKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::QuadKey const & reference is null");
    return 0;
  } 
  result = (bool)((QuadKeys::QuadKey const *)arg1)->operator ==((QuadKeys::QuadKey const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKey_1notEqualTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QuadKeys::QuadKey *arg1 = (QuadKeys::QuadKey *) 0 ;
  QuadKeys::QuadKey *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QuadKeys::QuadKey **)&jarg1; 
  arg2 = *(QuadKeys::QuadKey **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QuadKeys::QuadKey const & reference is null");
    return 0;
  } 
  result = (bool)((QuadKeys::QuadKey const *)arg1)->operator !=((QuadKeys::QuadKey const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_quadkey_SwigQuadKeyJNI_delete_1QuadKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  QuadKeys::QuadKey *arg1 = (QuadKeys::QuadKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QuadKeys::QuadKey **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_new_1QuadKeyVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< QuadKeys::QuadKey > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< QuadKeys::QuadKey > *)new std::vector< QuadKeys::QuadKey >();
  *(std::vector< QuadKeys::QuadKey > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_new_1QuadKeyVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< QuadKeys::QuadKey >::size_type arg1 ;
  std::vector< QuadKeys::QuadKey > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< QuadKeys::QuadKey >::size_type)jarg1; 
  result = (std::vector< QuadKeys::QuadKey > *)new std::vector< QuadKeys::QuadKey >(arg1);
  *(std::vector< QuadKeys::QuadKey > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKeyVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< QuadKeys::QuadKey > *arg1 = (std::vector< QuadKeys::QuadKey > *) 0 ;
  std::vector< QuadKeys::QuadKey >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QuadKeys::QuadKey > **)&jarg1; 
  result = ((std::vector< QuadKeys::QuadKey > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKeyVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< QuadKeys::QuadKey > *arg1 = (std::vector< QuadKeys::QuadKey > *) 0 ;
  std::vector< QuadKeys::QuadKey >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QuadKeys::QuadKey > **)&jarg1; 
  result = ((std::vector< QuadKeys::QuadKey > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKeyVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< QuadKeys::QuadKey > *arg1 = (std::vector< QuadKeys::QuadKey > *) 0 ;
  std::vector< QuadKeys::QuadKey >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QuadKeys::QuadKey > **)&jarg1; 
  arg2 = (std::vector< QuadKeys::QuadKey >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKeyVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< QuadKeys::QuadKey > *arg1 = (std::vector< QuadKeys::QuadKey > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QuadKeys::QuadKey > **)&jarg1; 
  result = (bool)((std::vector< QuadKeys::QuadKey > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKeyVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< QuadKeys::QuadKey > *arg1 = (std::vector< QuadKeys::QuadKey > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QuadKeys::QuadKey > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKeyVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< QuadKeys::QuadKey > *arg1 = (std::vector< QuadKeys::QuadKey > *) 0 ;
  std::vector< QuadKeys::QuadKey >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< QuadKeys::QuadKey > **)&jarg1; 
  arg2 = *(std::vector< QuadKeys::QuadKey >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< QuadKeys::QuadKey >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< QuadKeys::QuadKey >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKeyVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< QuadKeys::QuadKey > *arg1 = (std::vector< QuadKeys::QuadKey > *) 0 ;
  int arg2 ;
  std::vector< QuadKeys::QuadKey >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QuadKeys::QuadKey > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< QuadKeys::QuadKey >::value_type *) &std_vector_Sl_QuadKeys_QuadKey_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< QuadKeys::QuadKey >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_quadkey_SwigQuadKeyJNI_QuadKeyVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< QuadKeys::QuadKey > *arg1 = (std::vector< QuadKeys::QuadKey > *) 0 ;
  int arg2 ;
  std::vector< QuadKeys::QuadKey >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< QuadKeys::QuadKey > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< QuadKeys::QuadKey >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< QuadKeys::QuadKey >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_QuadKeys_QuadKey_Sg__set(arg1,arg2,(QuadKeys::QuadKey const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_quadkey_SwigQuadKeyJNI_delete_1QuadKeyVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< QuadKeys::QuadKey > *arg1 = (std::vector< QuadKeys::QuadKey > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< QuadKeys::QuadKey > **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

