/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.quadkey;

public class SwigQuadKeyJNI {
  public final static native double Longitude_minLongitude_get();
  public final static native double Longitude_maxLongitude_get();
  public final static native long new_Longitude__SWIG_0(double jarg1);
  public final static native long new_Longitude__SWIG_1(long jarg1, Longitude jarg1_);
  public final static native long Longitude_assignLongitude(long jarg1, Longitude jarg1_, long jarg2, Longitude jarg2_);
  public final static native double Longitude_val(long jarg1, Longitude jarg1_);
  public final static native boolean Longitude_near__SWIG_0(long jarg1, Longitude jarg1_, long jarg2, Longitude jarg2_, double jarg3);
  public final static native boolean Longitude_near__SWIG_1(long jarg1, Longitude jarg1_, long jarg2, Longitude jarg2_);
  public final static native boolean Longitude_lessThan(long jarg1, Longitude jarg1_, long jarg2, Longitude jarg2_);
  public final static native boolean Longitude_lessThanOrEqual(long jarg1, Longitude jarg1_, long jarg2, Longitude jarg2_);
  public final static native boolean Longitude_greaterThan(long jarg1, Longitude jarg1_, long jarg2, Longitude jarg2_);
  public final static native boolean Longitude_greaterThanOrEqual(long jarg1, Longitude jarg1_, long jarg2, Longitude jarg2_);
  public final static native boolean Longitude_equalTo(long jarg1, Longitude jarg1_, long jarg2, Longitude jarg2_);
  public final static native boolean Longitude_notEqualTo(long jarg1, Longitude jarg1_, long jarg2, Longitude jarg2_);
  public final static native double Longitude_longitudeDifference(long jarg1, Longitude jarg1_, long jarg2, Longitude jarg2_);
  public final static native void delete_Longitude(long jarg1);
  public final static native double Latitude_minLatitude_get();
  public final static native double Latitude_maxLatitude_get();
  public final static native long new_Latitude__SWIG_0(double jarg1);
  public final static native long new_Latitude__SWIG_1(long jarg1, Latitude jarg1_);
  public final static native long Latitude_assignLatitude(long jarg1, Latitude jarg1_, long jarg2, Latitude jarg2_);
  public final static native double Latitude_val(long jarg1, Latitude jarg1_);
  public final static native boolean Latitude_near__SWIG_0(long jarg1, Latitude jarg1_, long jarg2, Latitude jarg2_, double jarg3);
  public final static native boolean Latitude_near__SWIG_1(long jarg1, Latitude jarg1_, long jarg2, Latitude jarg2_);
  public final static native boolean Latitude_lessThan(long jarg1, Latitude jarg1_, long jarg2, Latitude jarg2_);
  public final static native boolean Latitude_lessThanOrEqual(long jarg1, Latitude jarg1_, long jarg2, Latitude jarg2_);
  public final static native boolean Latitude_greaterThan(long jarg1, Latitude jarg1_, long jarg2, Latitude jarg2_);
  public final static native boolean Latitude_greaterThanOrEqual(long jarg1, Latitude jarg1_, long jarg2, Latitude jarg2_);
  public final static native boolean Latitude_equalTo(long jarg1, Latitude jarg1_, long jarg2, Latitude jarg2_);
  public final static native boolean Latitude_notEqualTo(long jarg1, Latitude jarg1_, long jarg2, Latitude jarg2_);
  public final static native double Latitude_latitudeDifference(long jarg1, Latitude jarg1_, long jarg2, Latitude jarg2_);
  public final static native void delete_Latitude(long jarg1);
  public final static native long new_GeoCoordinate2d__SWIG_0();
  public final static native long new_GeoCoordinate2d__SWIG_1(long jarg1, Longitude jarg1_, long jarg2, Latitude jarg2_);
  public final static native long new_GeoCoordinate2d__SWIG_2(long jarg1, GeoCoordinate2d jarg1_);
  public final static native long GeoCoordinate2d_assignGeoCoordinate2d(long jarg1, GeoCoordinate2d jarg1_, long jarg2, GeoCoordinate2d jarg2_);
  public final static native void GeoCoordinate2d_longitude__SWIG_0(long jarg1, GeoCoordinate2d jarg1_, double jarg2);
  public final static native void GeoCoordinate2d_latitude__SWIG_0(long jarg1, GeoCoordinate2d jarg1_, double jarg2);
  public final static native void GeoCoordinate2d_longitude__SWIG_1(long jarg1, GeoCoordinate2d jarg1_, long jarg2, Longitude jarg2_);
  public final static native void GeoCoordinate2d_latitude__SWIG_1(long jarg1, GeoCoordinate2d jarg1_, long jarg2, Latitude jarg2_);
  public final static native long GeoCoordinate2d_longitude__SWIG_2(long jarg1, GeoCoordinate2d jarg1_);
  public final static native long GeoCoordinate2d_latitude__SWIG_2(long jarg1, GeoCoordinate2d jarg1_);
  public final static native boolean GeoCoordinate2d_near__SWIG_0(long jarg1, GeoCoordinate2d jarg1_, long jarg2, GeoCoordinate2d jarg2_, double jarg3);
  public final static native boolean GeoCoordinate2d_near__SWIG_1(long jarg1, GeoCoordinate2d jarg1_, long jarg2, GeoCoordinate2d jarg2_);
  public final static native boolean GeoCoordinate2d_equalTo(long jarg1, GeoCoordinate2d jarg1_, long jarg2, GeoCoordinate2d jarg2_);
  public final static native boolean GeoCoordinate2d_notEqualTo(long jarg1, GeoCoordinate2d jarg1_, long jarg2, GeoCoordinate2d jarg2_);
  public final static native void delete_GeoCoordinate2d(long jarg1);
  public final static native long new_GeoCoordinateBoundingBox2d__SWIG_0();
  public final static native long new_GeoCoordinateBoundingBox2d__SWIG_1(long jarg1, GeoCoordinate2d jarg1_, long jarg2, GeoCoordinate2d jarg2_);
  public final static native boolean GeoCoordinateBoundingBox2d_contains(long jarg1, GeoCoordinateBoundingBox2d jarg1_, long jarg2, GeoCoordinate2d jarg2_);
  public final static native void GeoCoordinateBoundingBox2d_growToContain(long jarg1, GeoCoordinateBoundingBox2d jarg1_, long jarg2, GeoCoordinate2d jarg2_);
  public final static native long GeoCoordinateBoundingBox2d_lowerLeft(long jarg1, GeoCoordinateBoundingBox2d jarg1_);
  public final static native long GeoCoordinateBoundingBox2d_upperRight(long jarg1, GeoCoordinateBoundingBox2d jarg1_);
  public final static native long GeoCoordinateBoundingBox2d_upperLeft(long jarg1, GeoCoordinateBoundingBox2d jarg1_);
  public final static native long GeoCoordinateBoundingBox2d_lowerRight(long jarg1, GeoCoordinateBoundingBox2d jarg1_);
  public final static native boolean GeoCoordinateBoundingBox2d_isValid(long jarg1, GeoCoordinateBoundingBox2d jarg1_);
  public final static native void delete_GeoCoordinateBoundingBox2d(long jarg1);
  public final static native String typeToString(int jarg1);
  public final static native int QuadKey_Quadrant_SouthWest_get();
  public final static native int QuadKey_Quadrant_SouthEast_get();
  public final static native int QuadKey_Quadrant_NorthWest_get();
  public final static native int QuadKey_Quadrant_NorthEast_get();
  public final static native long new_QuadKey__SWIG_0();
  public final static native long new_QuadKey__SWIG_1(int jarg1);
  public final static native long new_QuadKey__SWIG_2(int jarg1, long jarg2, long jarg3, short jarg4);
  public final static native long new_QuadKey__SWIG_3(long jarg1, QuadKey jarg1_);
  public final static native long QuadKey_assignQuadKey(long jarg1, QuadKey jarg1_, long jarg2, QuadKey jarg2_);
  public final static native int QuadKey_getType(long jarg1, QuadKey jarg1_);
  public final static native String QuadKey_typeAsString(long jarg1, QuadKey jarg1_);
  public final static native long QuadKey_getRow(long jarg1, QuadKey jarg1_);
  public final static native long QuadKey_getCol(long jarg1, QuadKey jarg1_);
  public final static native short QuadKey_getDepth(long jarg1, QuadKey jarg1_);
  public final static native boolean QuadKey_isRootKey(long jarg1, QuadKey jarg1_);
  public final static native long QuadKey_getParent(long jarg1, QuadKey jarg1_);
  public final static native boolean QuadKey_isMyAncestor(long jarg1, QuadKey jarg1_, long jarg2, QuadKey jarg2_);
  public final static native long QuadKey_getAncestor(long jarg1, QuadKey jarg1_, short jarg2);
  public final static native long QuadKey_getChild(long jarg1, QuadKey jarg1_, int jarg2);
  public final static native long QuadKey_getChildren(long jarg1, QuadKey jarg1_);
  public final static native long QuadKey_getDescendants(long jarg1, QuadKey jarg1_, short jarg2);
  public final static native long QuadKey_getSiblings(long jarg1, QuadKey jarg1_);
  public final static native long QuadKey_getNeighbors(long jarg1, QuadKey jarg1_);
  public final static native void QuadKey_getGeoCoordinateBounds2d(long jarg1, QuadKey jarg1_, long jarg2, GeoCoordinateBoundingBox2d jarg2_);
  public final static native String QuadKey_toInternalString(long jarg1, QuadKey jarg1_);
  public final static native long QuadKey_fromInternalString(int jarg1, String jarg2);
  public final static native long QuadKey_getKeyFromLongitudeLatitudeAtDepth(int jarg1, long jarg2, GeoCoordinate2d jarg2_, short jarg3);
  public final static native long QuadKey_getKeysFromLongitudeLatitudeBoundingBox(int jarg1, long jarg2, GeoCoordinateBoundingBox2d jarg2_, short jarg3);
  public final static native short QuadKey_maxDepth(int jarg1);
  public final static native long QuadKey_maxRows(int jarg1, short jarg2);
  public final static native long QuadKey_maxCols(int jarg1, short jarg2);
  public final static native java.math.BigInteger QuadKey_maxTiles(int jarg1, short jarg2);
  public final static native boolean QuadKey_lessThan(long jarg1, QuadKey jarg1_, long jarg2, QuadKey jarg2_);
  public final static native boolean QuadKey_equalTo(long jarg1, QuadKey jarg1_, long jarg2, QuadKey jarg2_);
  public final static native boolean QuadKey_notEqualTo(long jarg1, QuadKey jarg1_, long jarg2, QuadKey jarg2_);
  public final static native void delete_QuadKey(long jarg1);
  public final static native long new_QuadKeyVector__SWIG_0();
  public final static native long new_QuadKeyVector__SWIG_1(long jarg1);
  public final static native long QuadKeyVector_size(long jarg1, QuadKeyVector jarg1_);
  public final static native long QuadKeyVector_capacity(long jarg1, QuadKeyVector jarg1_);
  public final static native void QuadKeyVector_reserve(long jarg1, QuadKeyVector jarg1_, long jarg2);
  public final static native boolean QuadKeyVector_isEmpty(long jarg1, QuadKeyVector jarg1_);
  public final static native void QuadKeyVector_clear(long jarg1, QuadKeyVector jarg1_);
  public final static native void QuadKeyVector_add(long jarg1, QuadKeyVector jarg1_, long jarg2, QuadKey jarg2_);
  public final static native long QuadKeyVector_get(long jarg1, QuadKeyVector jarg1_, int jarg2);
  public final static native void QuadKeyVector_set(long jarg1, QuadKeyVector jarg1_, int jarg2, long jarg3, QuadKey jarg3_);
  public final static native void delete_QuadKeyVector(long jarg1);
}
