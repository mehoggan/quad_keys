# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_quadkey')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_quadkey')
    _quadkey = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_quadkey', [dirname(__file__)])
        except ImportError:
            import _quadkey
            return _quadkey
        if fp is not None:
            try:
                _mod = imp.load_module('_quadkey', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _quadkey = swig_import_helper()
    del swig_import_helper
else:
    import _quadkey
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class Longitude(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Longitude, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Longitude, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _quadkey.new_Longitude(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def val(self):
        return _quadkey.Longitude_val(self)

    def near(self, *args):
        return _quadkey.Longitude_near(self, *args)

    def __lt__(self, rhs):
        return _quadkey.Longitude___lt__(self, rhs)

    def __le__(self, rhs):
        return _quadkey.Longitude___le__(self, rhs)

    def __gt__(self, rhs):
        return _quadkey.Longitude___gt__(self, rhs)

    def __ge__(self, rhs):
        return _quadkey.Longitude___ge__(self, rhs)

    def __eq__(self, rhs):
        return _quadkey.Longitude___eq__(self, rhs)

    def __ne__(self, rhs):
        return _quadkey.Longitude___ne__(self, rhs)

    def __sub__(self, subtrahend):
        return _quadkey.Longitude___sub__(self, subtrahend)
    __swig_destroy__ = _quadkey.delete_Longitude
    __del__ = lambda self: None
Longitude_swigregister = _quadkey.Longitude_swigregister
Longitude_swigregister(Longitude)
cvar = _quadkey.cvar
Longitude.minLongitude = _quadkey.cvar.Longitude_minLongitude
Longitude.maxLongitude = _quadkey.cvar.Longitude_maxLongitude

class Latitude(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Latitude, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Latitude, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _quadkey.new_Latitude(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def val(self):
        return _quadkey.Latitude_val(self)

    def near(self, *args):
        return _quadkey.Latitude_near(self, *args)

    def __lt__(self, rhs):
        return _quadkey.Latitude___lt__(self, rhs)

    def __le__(self, rhs):
        return _quadkey.Latitude___le__(self, rhs)

    def __gt__(self, rhs):
        return _quadkey.Latitude___gt__(self, rhs)

    def __ge__(self, rhs):
        return _quadkey.Latitude___ge__(self, rhs)

    def __eq__(self, rhs):
        return _quadkey.Latitude___eq__(self, rhs)

    def __ne__(self, rhs):
        return _quadkey.Latitude___ne__(self, rhs)

    def __sub__(self, subtrahend):
        return _quadkey.Latitude___sub__(self, subtrahend)
    __swig_destroy__ = _quadkey.delete_Latitude
    __del__ = lambda self: None
Latitude_swigregister = _quadkey.Latitude_swigregister
Latitude_swigregister(Latitude)
Latitude.minLatitude = _quadkey.cvar.Latitude_minLatitude
Latitude.maxLatitude = _quadkey.cvar.Latitude_maxLatitude

class GeoCoordinate2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoCoordinate2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeoCoordinate2d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _quadkey.new_GeoCoordinate2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def longitude(self, *args):
        return _quadkey.GeoCoordinate2d_longitude(self, *args)

    def latitude(self, *args):
        return _quadkey.GeoCoordinate2d_latitude(self, *args)

    def near(self, *args):
        return _quadkey.GeoCoordinate2d_near(self, *args)

    def __eq__(self, rhs):
        return _quadkey.GeoCoordinate2d___eq__(self, rhs)

    def __ne__(self, rhs):
        return _quadkey.GeoCoordinate2d___ne__(self, rhs)
    __swig_destroy__ = _quadkey.delete_GeoCoordinate2d
    __del__ = lambda self: None
GeoCoordinate2d_swigregister = _quadkey.GeoCoordinate2d_swigregister
GeoCoordinate2d_swigregister(GeoCoordinate2d)

class GeoCoordinateBoundingBox2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoCoordinateBoundingBox2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeoCoordinateBoundingBox2d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _quadkey.new_GeoCoordinateBoundingBox2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def contains(self, coordinate):
        return _quadkey.GeoCoordinateBoundingBox2d_contains(self, coordinate)

    def growToContain(self, coordinate):
        return _quadkey.GeoCoordinateBoundingBox2d_growToContain(self, coordinate)

    def lowerLeft(self):
        return _quadkey.GeoCoordinateBoundingBox2d_lowerLeft(self)

    def upperRight(self):
        return _quadkey.GeoCoordinateBoundingBox2d_upperRight(self)

    def upperLeft(self):
        return _quadkey.GeoCoordinateBoundingBox2d_upperLeft(self)

    def lowerRight(self):
        return _quadkey.GeoCoordinateBoundingBox2d_lowerRight(self)

    def __eq__(self, rhs):
        return _quadkey.GeoCoordinateBoundingBox2d___eq__(self, rhs)

    def isValid(self):
        return _quadkey.GeoCoordinateBoundingBox2d_isValid(self)
    __swig_destroy__ = _quadkey.delete_GeoCoordinateBoundingBox2d
    __del__ = lambda self: None
GeoCoordinateBoundingBox2d_swigregister = _quadkey.GeoCoordinateBoundingBox2d_swigregister
GeoCoordinateBoundingBox2d_swigregister(GeoCoordinateBoundingBox2d)

Type__None = _quadkey.Type__None
Type_Bing = _quadkey.Type_Bing
Type_LatLong = _quadkey.Type_LatLong
Type_UlpQnr = _quadkey.Type_UlpQnr
Type_OsGeo = _quadkey.Type_OsGeo
Type_Morton = _quadkey.Type_Morton

def typeToString(type):
    return _quadkey.typeToString(type)
typeToString = _quadkey.typeToString
class QuadKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuadKey, name)
    __repr__ = _swig_repr
    Quadrant_SouthWest = _quadkey.QuadKey_Quadrant_SouthWest
    Quadrant_SouthEast = _quadkey.QuadKey_Quadrant_SouthEast
    Quadrant_NorthWest = _quadkey.QuadKey_Quadrant_NorthWest
    Quadrant_NorthEast = _quadkey.QuadKey_Quadrant_NorthEast

    def __init__(self, *args):
        this = _quadkey.new_QuadKey(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self):
        return _quadkey.QuadKey_getType(self)

    def typeAsString(self):
        return _quadkey.QuadKey_typeAsString(self)

    def getRow(self):
        return _quadkey.QuadKey_getRow(self)

    def getCol(self):
        return _quadkey.QuadKey_getCol(self)

    def getDepth(self):
        return _quadkey.QuadKey_getDepth(self)

    def isRootKey(self):
        return _quadkey.QuadKey_isRootKey(self)

    def getParent(self):
        return _quadkey.QuadKey_getParent(self)

    def isMyAncestor(self, quadKey):
        return _quadkey.QuadKey_isMyAncestor(self, quadKey)

    def getAncestor(self, depthDelta):
        return _quadkey.QuadKey_getAncestor(self, depthDelta)

    def getChild(self, quadrant):
        return _quadkey.QuadKey_getChild(self, quadrant)

    def getChildren(self):
        return _quadkey.QuadKey_getChildren(self)

    def getDescendants(self, depthDelta):
        return _quadkey.QuadKey_getDescendants(self, depthDelta)

    def getSiblings(self):
        return _quadkey.QuadKey_getSiblings(self)

    def getNeighbors(self):
        return _quadkey.QuadKey_getNeighbors(self)

    def getGeoCoordinateBounds2d(self, outBounds):
        return _quadkey.QuadKey_getGeoCoordinateBounds2d(self, outBounds)

    def toInternalString(self):
        return _quadkey.QuadKey_toInternalString(self)
    if _newclass:
        fromInternalString = staticmethod(_quadkey.QuadKey_fromInternalString)
    else:
        fromInternalString = _quadkey.QuadKey_fromInternalString
    if _newclass:
        getKeyFromLongitudeLatitudeAtDepth = staticmethod(_quadkey.QuadKey_getKeyFromLongitudeLatitudeAtDepth)
    else:
        getKeyFromLongitudeLatitudeAtDepth = _quadkey.QuadKey_getKeyFromLongitudeLatitudeAtDepth
    if _newclass:
        getKeysFromLongitudeLatitudeBoundingBox = staticmethod(_quadkey.QuadKey_getKeysFromLongitudeLatitudeBoundingBox)
    else:
        getKeysFromLongitudeLatitudeBoundingBox = _quadkey.QuadKey_getKeysFromLongitudeLatitudeBoundingBox
    if _newclass:
        maxDepth = staticmethod(_quadkey.QuadKey_maxDepth)
    else:
        maxDepth = _quadkey.QuadKey_maxDepth
    if _newclass:
        maxRows = staticmethod(_quadkey.QuadKey_maxRows)
    else:
        maxRows = _quadkey.QuadKey_maxRows
    if _newclass:
        maxCols = staticmethod(_quadkey.QuadKey_maxCols)
    else:
        maxCols = _quadkey.QuadKey_maxCols
    if _newclass:
        maxTiles = staticmethod(_quadkey.QuadKey_maxTiles)
    else:
        maxTiles = _quadkey.QuadKey_maxTiles

    def __lt__(self, rhs):
        return _quadkey.QuadKey___lt__(self, rhs)

    def __eq__(self, rhs):
        return _quadkey.QuadKey___eq__(self, rhs)

    def __ne__(self, rhs):
        return _quadkey.QuadKey___ne__(self, rhs)
    __swig_destroy__ = _quadkey.delete_QuadKey
    __del__ = lambda self: None
QuadKey_swigregister = _quadkey.QuadKey_swigregister
QuadKey_swigregister(QuadKey)

def QuadKey_fromInternalString(type, inString):
    return _quadkey.QuadKey_fromInternalString(type, inString)
QuadKey_fromInternalString = _quadkey.QuadKey_fromInternalString

def QuadKey_getKeyFromLongitudeLatitudeAtDepth(type, coords, depth):
    return _quadkey.QuadKey_getKeyFromLongitudeLatitudeAtDepth(type, coords, depth)
QuadKey_getKeyFromLongitudeLatitudeAtDepth = _quadkey.QuadKey_getKeyFromLongitudeLatitudeAtDepth

def QuadKey_getKeysFromLongitudeLatitudeBoundingBox(type, bounds, depth):
    return _quadkey.QuadKey_getKeysFromLongitudeLatitudeBoundingBox(type, bounds, depth)
QuadKey_getKeysFromLongitudeLatitudeBoundingBox = _quadkey.QuadKey_getKeysFromLongitudeLatitudeBoundingBox

def QuadKey_maxDepth(type):
    return _quadkey.QuadKey_maxDepth(type)
QuadKey_maxDepth = _quadkey.QuadKey_maxDepth

def QuadKey_maxRows(type, depth):
    return _quadkey.QuadKey_maxRows(type, depth)
QuadKey_maxRows = _quadkey.QuadKey_maxRows

def QuadKey_maxCols(type, depth):
    return _quadkey.QuadKey_maxCols(type, depth)
QuadKey_maxCols = _quadkey.QuadKey_maxCols

def QuadKey_maxTiles(type, depth):
    return _quadkey.QuadKey_maxTiles(type, depth)
QuadKey_maxTiles = _quadkey.QuadKey_maxTiles

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quadkey.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _quadkey.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _quadkey.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _quadkey.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _quadkey.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _quadkey.SwigPyIterator_equal(self, x)

    def copy(self):
        return _quadkey.SwigPyIterator_copy(self)

    def next(self):
        return _quadkey.SwigPyIterator_next(self)

    def __next__(self):
        return _quadkey.SwigPyIterator___next__(self)

    def previous(self):
        return _quadkey.SwigPyIterator_previous(self)

    def advance(self, n):
        return _quadkey.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _quadkey.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _quadkey.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _quadkey.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _quadkey.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _quadkey.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _quadkey.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _quadkey.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class QuadKeyVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadKeyVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuadKeyVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _quadkey.QuadKeyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _quadkey.QuadKeyVector___nonzero__(self)

    def __bool__(self):
        return _quadkey.QuadKeyVector___bool__(self)

    def __len__(self):
        return _quadkey.QuadKeyVector___len__(self)

    def __getslice__(self, i, j):
        return _quadkey.QuadKeyVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _quadkey.QuadKeyVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _quadkey.QuadKeyVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _quadkey.QuadKeyVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _quadkey.QuadKeyVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _quadkey.QuadKeyVector___setitem__(self, *args)

    def pop(self):
        return _quadkey.QuadKeyVector_pop(self)

    def append(self, x):
        return _quadkey.QuadKeyVector_append(self, x)

    def empty(self):
        return _quadkey.QuadKeyVector_empty(self)

    def size(self):
        return _quadkey.QuadKeyVector_size(self)

    def swap(self, v):
        return _quadkey.QuadKeyVector_swap(self, v)

    def begin(self):
        return _quadkey.QuadKeyVector_begin(self)

    def end(self):
        return _quadkey.QuadKeyVector_end(self)

    def rbegin(self):
        return _quadkey.QuadKeyVector_rbegin(self)

    def rend(self):
        return _quadkey.QuadKeyVector_rend(self)

    def clear(self):
        return _quadkey.QuadKeyVector_clear(self)

    def get_allocator(self):
        return _quadkey.QuadKeyVector_get_allocator(self)

    def pop_back(self):
        return _quadkey.QuadKeyVector_pop_back(self)

    def erase(self, *args):
        return _quadkey.QuadKeyVector_erase(self, *args)

    def __init__(self, *args):
        this = _quadkey.new_QuadKeyVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _quadkey.QuadKeyVector_push_back(self, x)

    def front(self):
        return _quadkey.QuadKeyVector_front(self)

    def back(self):
        return _quadkey.QuadKeyVector_back(self)

    def assign(self, n, x):
        return _quadkey.QuadKeyVector_assign(self, n, x)

    def resize(self, *args):
        return _quadkey.QuadKeyVector_resize(self, *args)

    def insert(self, *args):
        return _quadkey.QuadKeyVector_insert(self, *args)

    def reserve(self, n):
        return _quadkey.QuadKeyVector_reserve(self, n)

    def capacity(self):
        return _quadkey.QuadKeyVector_capacity(self)
    __swig_destroy__ = _quadkey.delete_QuadKeyVector
    __del__ = lambda self: None
QuadKeyVector_swigregister = _quadkey.QuadKeyVector_swigregister
QuadKeyVector_swigregister(QuadKeyVector)

# This file is compatible with both classic and new-style classes.


